
I Am Legend:

Items are sorted by priority (highest on top).
o a pending  TODO item (for the current release)
. a pending  TODO item (for future releases)
x a finished TODO item

-----------------------------------------------------------------------------
This Branch Is About Integrating The hamsterdb2 Functionality!!!!!
-----------------------------------------------------------------------------
The big headline is:
As a user i want to run many Transactions in parallel with high performance.
I'm using multiple threads b/c my CPU has multiple cores, and expect hamsterdb
to scale with the number of cores.
==============================================================================

x clean up and refactor the code
    x os.h
    x os_posix.cc
    x os_win32.cc
    x packstart.h
    x packstop.h
    x rb.h
    x serial.h
    x version.h
    x util.cc
    x util.h
    x config.h
    x internal_fwd_decl.h
    x errorinducer.h
    x endianswap.h
    x mem.cc
    x mem.h
    x error.cc
        fill dbg_lock, dbg_unlock
    x error.h
        ham_assert/ham_verify: remove second parameter
    x cache.cc
    x cache.h
    x changeset.cc
    x changeset.h
    x device.cc
    x device.h
    x journal.cc
    x journal.h
    x journal_entries.h
    x log.cc
    x log.h
    x page.cc
    x page.h
    x extkeys.h
    x hash-table.h
    x blob.h
    x blob.cc
        x use os_writev when writing blob header/body - not possible
        x move duplicate stuff into btree_dupes.*, refactor
            replace __duplicate_get_table with BlobManager::read (needs to
                dynamically resize the buffer)

    x protocol - finally get rid of it
      x Protocol: default constructor should assign type

    x remote.cc
      x create Protocol objects on the stack whenever possible!
      x once more check for indention, spaces etc
    x hamserver.cc
      x create Protocol objects on the stack whenever possible!

    x include/ham/hamsterdb.h
    x include/ham/hamsterdb_int.h
    x include/ham/hamsterdb_stats.h

x remove the mutex code - for now we leave it as is
    x cache
    x extkey-cache
    x log
    x journal
    x changeset
    x device
    x freelist
    x backend

x implementation of hamsterdb should move into namespace ham; otherwise
    there are conflicts if users have a C++ class called Database or
    Environment etc

x see Laurent's email on the mailing list
    x 30 million keys (with Transactions)
    x group 2 million inserts into a single Transaction
    x then commit; the commit requires about 100 seconds
    -> do profiling on "master" and "v2"!

x rename HAM_IN_MEMORY_DB to HAM_IN_MEMORY

x continue with refacoring - indention, coding style, better design etc...
    x backend.h
    x hamsterdb_stats - make private, not public
        x rename to statistics.h
        x remove everything that's not required
    x btree_stats.h
        x remove everything that is not required
        x namespace Btree::Statistics
        x adjust coding style
        x fix get_global_perf_data, db_get_perf_data
    x btree_stats.cc
        x adjust coding style
        x move from db.h to btree.h
        x should use arena for lower/upper bounds and use
            HAM_KEY_USERALLOC when calling db->get_extended_key()
    x btree.h
        x remove namespace Btree
        x Statistics -> BtreeStatistics
        x rename btree_node_t -> BtreeNode (with getters/setters)
        x move BtreeNode to btree_node.h
        x remove global functions
        x do not use btree_cursor_t in backend.h, only use Cursor
    x btree.cc
        x code formatting
        x get rid of ham_bool_t
        x replace db_get_keysize() with backend->get_keysize()
    x btree_key.h
        x code formatting
        x rename btree_key_t -> BtreeKey (with getters/setters)
        x Backend::read_key -> move to BtreeBackend? no, leave it
        x all #defines -> enum
        x db_get_int_key_header_size -> Backend::get_full_keysize(payload_size)
    x btree_key.cc
        x code formatting
    x btree_check.cc
        x improve BtreeCheckAction; use it as template for enum, find, etc
        x constructor takes BtreeBackend
    x btree_enum.cc
        x remove scratchpad, use member variables
    x btree_find.cc
        x remove scratchpad, use member variables
    x btree_stats.cc
        x many fields in the "hint" structures are currently not used
        x if last insert is an append: try fast-track in next insert
        x if last erase is at the end: try fast-track in next erase
        x if last insert is an prepend: try fast-track in next insert
        x if last erase is at the beginning: try fast-track in next erase
        x if the last 5 operations (insert, erase or find) are on the same
            page then try fast-track in the next operation
        x unittest currently crashes
        x there's a TODO in BtreeInsertAction
        x also make sure that BtreeFindAction checks the hints
    x btree_insert.cc
        x remove scratchpad, use member variables
        x replace db_get_keysize() with backend->get_keysize()
        x count the number of appends/prepends; if the last 30 inserts were 
            appends: split at end; if the last 10 inserts were appends:
            split at 2/3rd (similar for prepends)
    x btree_erase.cc
        x remove scratchpad, use member variables
        x replace db_get_keysize() with backend->get_keysize()
        x check the TODOs
    x btree_cursor.cc
    x btree_cursor.h
        x rename to BtreeCursor
        x replace db_get_keysize() with backend->get_keysize()
        x move global functions into namespace of class
        x fix coding style
        x declare ham_key_t as struct, not as pointer

x jake: disable file indexing with file attribute on windows
    FILE_ATTRIBUTE_NOT_CONTENT_INDEXED

x fix memory leaks (run unittests with valgrind)
    -> unittests/leaks.txt
    x add FilterTest::zlibFilterTest to suppression
    x MiscPartialTests::invalidFindParametersTest
    x MiscPartialTests::disabledTransactionsTest
    x RemoteTest::insertFindEraseUserallocTest??

o recno: make sure that there's no write to the header page with every
    insert; this would kill the performance when recovery is enabled 
    o move from backend to (local) db
    o when opening, always read last recno from the database (with a cursor)
        (in hamsterdb.cc, at the end of ham_env_open_db)

o add transaction support for in-memory databases

o run performance tests with google memory allocator

o optimize memory usage in transaction tree: avoid malloc/free use page
    allocator
    o txn.h
    o txn.cc
        o get rid of the rb-tree; use std::map or std::set instead
            std::map<ham_key_t, boost::unintrusive_list<Operation> >
            -> this needs a proper redesign:
          o TransactionManager: is a factory for new Transactions; owned by
            the Environment and manages the Transaction IDs
          o TransactionBackend: this is the std::map which contains the nodes
            (TransactionNode) and the operations (TransactionOperation)
          o Try to reduce the TransactionNode to the key and the linked list
          o Try to make the interface of TransactionBackend similar to
            BtreeBackend
          o The Node manages the ham_key_t and the list of Operations
        o txn->name: use std::string
        o txn_free_optree -> ~TransactionTree
        o txn_optree_t -> TransactionTree
        o txn_op_node_t -> TransactionTreeNode
        o txn_op_t -> TransactionOperation
        o convert to clean c++ code

o involve everyone in decisions on the new interface
    Do you use any of the HAM_HINT_* flags?
      If yes, would it be very problematic if I would remove this functionality?
    Do you use any of the HAM_DAM_* flags?
      If yes, would it be very problematic if I would remove this functionality?
    Do you use AES encryption?
      If yes, would it be very problematic if I would remove this functionality?
    Do you use zlib compression?
      If yes, would it be very problematic if I would remove this functionality?
    Do you use other file filters/record filters?
    Do you use any of the functions/structures in hamsterdb_stats.h?
    Do you use any of the functions/structures in hamsterdb_int.h?
      ham_get_keycount_per_page
      TODO @@@ - be more specific
    Do you use to insert duplicate keys at exact positions (i.e. use one of
        HAM_CURSOR_INSERT_BEFORE, HAM_CURSOR_INSERT_AFTER,
        HAM_CURSOR_INSERT_FIRST, HAM_CURSOR_INSERT_LAST)?
      If yes, would it be very problematic if I would remove this functionality?
    Do you use ham_cursor_move in combination with HAM_SKIP_DUPLICATES
        or HAM_ONLY_DUPLICATES?
      If yes, would it be very problematic if I would remove this functionality?
    Do you use sorted duplicates?
      If yes, would it be very problematic if I would remove this functionality?

o clean up interface
    o rename ham_env_open_ex to ham_env_open, remove ham_open[_ex]
    o rename ham_env_create_ex to ham_env_create, remove ham_create[_ex]
    o rename ham_cursor_find_ex to ham_cursor_find
    o clean up ham_flush, ham_env_flush
    o clean up ham_get_parameters, ham_env_get_parameters, ham_get_flags
    o clean up ham/hamsterdb_stats.h, ham/hamsterdb_int.h

o freelist rewrite - make files smaller, make hamsterdb faster
    o freelist.h
    o freelist.cc
    o freelist_statistics.h
    o freelist_statistics.cc
        ==> get rid of the whole freelist; no need to refactor the existing
            code
        ==> described in github wiki
        ==> need a migration path (i.e. allow forward-cursors if db is
            read-only, no transactions)

o continue with refacoring - indention, coding style, better design etc...
    o move duplicates into btree namespace (btree_dup.cc)
    o backend.h/btree.h: check the TODOs

    o configuration: move into separate file
        o use for runtime-configuration
        o and for persistent configuration

    o db.h
    o db.cc
        o should use arena for get_extended_key
        o completely hide the local/remote implementation in the database
        o move more members from Database to the Implementation classes
        o improve abstraction
    o env.h
    o env.cc
        o completely hide the local/remote implementation in the Environment
        o move more members from Environment to the Implementation classes
        o improve abstraction

    o cursor.cc
    o cursor.h

    o txn_cursor.h
    o txn_cursor.cc
        o get rid of dependency to BtreeCursor

    o hamsterdb.cc

    o unittests
        o code formatting
        o reduce bfc to a single header file, or use boost unittest framework
            http://www.boost.org/doc/libs/1_35_0/libs/test/doc/components/utf/index.html
            http://www.beroux.com/english/articles/boost_unit_testing/
            http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/

    o get rid of ham_bool_t, replace with bool whenever possible

o fix usage of DB_NEW_PAGE_DOES_THRASH_CACHE

o should in-memory databases rather use a std::map with a custom allocator?
    this would reduce the memory usage

o changeset: instead of simply adding pages to the changeset, the caller
    could already specify whether this page needs logging or not;
    i.e. after freelist rewrite, the blob pages do not need logging if a
    blob is deleted  

o is there a way to group all changeset flushes of a Transaction into one
    changeset? that way we would avoid the frequent syncs
    o would have to remove all of assert(changeset.is_empty())
    o but we can use that assert prior to txn_begin

o is the recovery working if there's a crash during ham_close?

o also remove locking from C# and Java APIs

o why do tests with 20 threads fail with oom when using mmap? the cache limits
    should still work

o clean up the "close" functions
    o ham_close - move all functionality to Database::close
    o ham_env_close - move all functionality to Environment::close
    o ~Database: call close(), then simplify all code
    o ~Environment: call close(), then simplify all code
    o Cursor::close: currently (nearly) empty; merge with ~Cursor and
        Database::close_cursor()
    o do not have st2/st; just fail if there's a serious problem

o BtreeFindAction: always use a cursor, and when doing approx matching
    then simply move left or right with that cursor

o flush in background (asynchronously)
    o need new flag file HAM_DISABLE_ASYNCHRONOUS_FLUSH
    o if in-memory database: disable async flush
    o if transactions are disabled: disable async flush
    o if enabled: create background thread, wait for signal
    o ham_env_flush: if txn are enabled then try to flush them to disk
    o how to deal with an error in the background thread???
        o store in Environment, then return in every exported function
    o default: async flush is OFF!

    o extend monster tests
        o with async flush
        o without async flush
        o extend/run performance test
        o run monster tests

    o documentation
        o tutorial
        o faq

o btree_cursor.h/btree_cursor.cc
    o use memory arena for uncoupling the key

o python API - update and integrate
    o rewrite with boost::python??
    o also add to win32 package

o need a function to get the txn of a conflict (same as in v2)
    ham_status_t ham_txn_get_conflicting_txn(ham_txn_t *txn, ham_txn_t **other);
        oder: txn-id zurückgeben?
    o also add to c++ API
    o add documentation (header file)
    o add documentation (wiki)

o recovery: re-create pending transactions (if required)
    o needs a function to enumerate them

o allow transactions in-memory

o allow transactions w/o journal

o allow transactions w/o recovery

o rename HAM_WRITE_THROUGH to HAM_ENABLE_FSYNC

. android port (needs new java api) in /contrib directory (it's on a separate
    branch)

. new test case for cursors
    insert (1, a)
    insert (1, b) (duplicate of 1)
    move (last) (-> 1, b)
    insert (1, c)
    move (last) (-> 1, c)? is the dupecache updated correctly?

. look for someone who can write a PHP or Perl or Ruby wrapper

. implement support for partial keys

. test with tcmalloc; if it works then also use it in the master branch, but
    make sure that memory consumption does not increase significantly

. there are a couple of areas where a btree cursor is uncoupled, just to
    retrieve the key and to couple the txn-key. that's not efficient
        db.c:__btree_cursor_points_to
        db.c:__compare_cursors
        txn_cursor.c:cursor_sync
        txn_cursor.c:cursor_overwrite
    o move to a separate function
    o try to optimize

. hash-table.h: the foreach/remove_if/visitor pattern is clumsy. use
    functor or class w/ operator() instead
. changeset: use a generic hash table for fast lookup (but leave list in place
    for everything else)
. cache: use a generic hash table

. add tests to verify that the cursor is not modified if an operation fails!
    (in cursor.cpp:LongTxnCursorTest are some wrapper functions to move or
    insert the cursor; that's a good starting point)

. the whole c++ protocol should be c++-ified

. move the whole configuration (key sizes, parameters, page size, etc) into a
    separate class which is instantiated by the env

. c++-ify the btree node representation;
    o include duplicates as well! disentangle duplicates from blob-handling

. c++-ify the blob handling and split off the duplicates

. cleanup db.h/db.cc - move functions into Database or
    DatabaseImplementationLocal namespace - but take care b/c these functions
    are also used by Cursor or other modules which don't necessarily have
    access to the Local stuff
    o db_get_key_count
    o db_alloc_page
    o db_fetch_page
    o db_insert_txn
    o db_erase_txn
    o db_find_txn
    o db_check_insert_conflicts
    o db_check_erase_conflicts
    o __increment_dupe_index

. c++-ify everything else

. device, page and os shold no longer return errors but throw exceptions

XXXXXXXXXXXXXXXXXXXXX release 2.0.0 STABLE !!! XXXXXXXXXXXXXXXXXXXXXXXXXXXXX

. new flag for transactions: HAM_TXN_WILL_COMMIT
    if this flag is set, then write all records directly to the blob, not
    to the log. the log will only contain the rid.
    o document this (and also the drawback - that an abort will lose the
        blobs and they cannot be reused
    -> this affects all temporary ham_insert-transactions
    (not sure if this should get high priority)

o hamsterdb.com
    x add twitter feed
    o API documentation: don't link to "modules" but to startup page, update
        with newest version
    o crupp.de: do a backup of the database
    . google +1 button
    . can we use something like Aller.font?

o update documentation
    x in header file
    o in the wiki
        o don't forget to list all functions that are currently disabled
            w/ txn's -> sorting dupes, approx. matching, ...
        o transactional behavior/conflicts of duplicate keys
    o in the wiki: start with internal documentation
        o transactions
        o architecture
        o btree
        o journal/log
        o cache
        o I/O
        o unittests
        o cursor(s)
        o monstertests - how to use them?

o fully (!) automize the whole release process for unix; the result (on
    success) are the following files:
    o tar-ball
    o the README
    o the documentation as a tar
    o the Changelog
    o the release notes (a template)
    o the output (xml) of the monster tests

. port to WinCE

o how can we extend the monster-tests to have reliable tests for transactions?

. if memory consumption in the txn-tree is too high: flush records to disk
    (not sure if this should get high priority)

o when recovering, give users the choice if active transactions should be
    aborted (default behavior) or re-created

o extkeys: don't use txn_id for the 'age', use lsn instead

o the DatabaseImplementation subclass is not neccessary; all subclasses
    can directly derive from Database.

. allow use of transactions without a log/journal

. allow use of transactions for in-memory databases

XXXXXXXXXXXXXXXXXXXXX release 2.0.0 STABLE XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

o ham_get_count: could be atomically updated with every journal entry

o when flushing a changeset: sort by offset, use writev()

o add concurrency (on a high level)

o flush transactions in background

. have a flag to disable flushing of logfiles/journal files (or flush them
    async.)

o continue as described in integrate-ham2.txt...

