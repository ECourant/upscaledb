
-----------------------------------------------------

o einfaches tutorial/sample

o auf 32bit-rechner testen

o brauchen wir HAM_OS_LIN32??

o ham_strerror()-funktion überarbeiten

-----------------------------------------------------
-----------------------------------------------------

o profiling! aber mit der release-version...
    o in-memory-db
    o os_mmap
    o read
    o verschiedene page- und keygrössen
    o nur inserts
    o nur inserts ohne blob
    o nur erase
    o nur lookup
    o auch gegen andere backends (qdbm, sqlite, ...)
    o etc etc etc

    o können wir drauf verzichten, beim db_page_alloc ein tell, seek, 
        truncate zu machen? evtl kommen wir ganz ohne resize aus??
    o können wir die minkeys/maxkeys hochsetzen? bzw. später splitten 
    und später mergen?
        o pagesplits/merges in bdb zählen
        o bdb: wie gross sind ihre pages? 
        o bdb: wie gross sind ihre keys? 

-----------------------------------------------------
-----------------------------------------------------

o endianness testen

-----------------------------------------------------

o tests
    o test mit freelist
    o test mit mmap, verschiedene pagesizes
    o test mit read, verschiedene pagesizes
    o test mit in-memory-db, verschiedene pagesizes
    o in-memory-database testen
    o verschiedene pagesizes/keysizes für
        o in-memory-db
        o os_mmap
        o read(2)

-----------------------------------------------------

o momentan werden alle pages auf null gesetzt (memset(page->pers->payload, 0))
    und zwar evtl sogar mehrmals (freelist!)
    raus damit!

-----------------------------------------------------

o doku
    o überarbeiten
    o erweitern

-----------------------------------------------------

o statistics
    will wissen wie viele freelist-hits/misses und cache-hits/misses es gab

    brauche bei den statistik-feldern die anzahl der aktuellen Keys in der
    Datenbank

    wird im sql gebraucht für AUTO_INCREMENT vom index und für eine schnelle
    Berechnung
    von MAX() über die ganze tabelle.

    allerdings wird das etwas tricky, sobald transaktionen dazu kommen - erst
    beim commit der transaktion muss der zähler inkrementiert/dekrementiert und
    auf platte geschrieben werden. erst sobald der erhöhte zähler wirklich auf
    platte geschrieben wurde, ist die transaktion abgeschlossen.

    jedoch ist das blöd, weil es dann immer einen zusätzlichen
    schreibzugriff gibt, sobald ein insert oder erase stattfindet. eher 
    sollte nach dem start geprüft werden, ob es einen absturz gab - 
    falls ja, werden die statistiken gelöscht, und on demand wieder 
    initialisiert. (diese ganze problematik kommt erst, wenn wir sql brauchen).

    Die MAX-Berechnung sollte recht simpel sein. Alle anderen Statistiken (z.b.
    total size von allen Datensätzen) werden teuer - die sollten nicht immer
    up-to-date gehalten werden, sondern nur on-demand vom cli-tool "ham_stats"
    ausgegeben werden).

o statistics
    get generic getter/setter for statistical value, i.e. 
        enum { CACHEHITS, CACHEMISSES, PAGES, FREEPAGES, ... };
        ham_u64_t statistics[8];
    set_stats_value(db, which, value): db->statistics[which]=ham_h2db32(value)
    ATTENTION: some of those values are specific for each backend, others
        are global; therefore we need two functions: 
        ham_get_global_statistics(stat)
        ham_get_index_statistics(index, stat)

-----------------------------------------------------

o get hamster version
    gibt's ne möglichkeit, die version der
    library abzufragen? klar - sie steht in einer header-datei
    aber die ist privat und kann nicht "von aussen" abgefragt werden. 
    evtl wäre eine exportierte funktion besser:
    
    ham_status_t ham_get_version(ham_u32_t *major,
            ham_u32_t *minor, ham_u32_t *revision)

-----------------------------------------------------
-----------------------------------------------------

o tools
    o ham_dump
    o ham_stats

-----------------------------------------------------

o configuration management: HAM_32BIT/HAM_64BIT, HAM_OS_POSIX/HAM_OS_WINDOWS
    automatisch während des build-prozesses erkennen; momentan 
    werden sie in ham/config.h gesetzt

o stress test mit zufällig fehlschlagenden io-funktionen und zufälligen
    OUT_OF_MEMORYs

--------------

o cache: bucketgrösse in ham_config.h verschieben, eine #define-konstante
    draus machen

--------------

o new flag for create/open: USE_FLOCK calls flock() around insert/erase 
        (makes mostly sense if cachesize==0)

o profiling: if a page is allocated, allocate more pages, then we have only
    one disk access (???)

--------------

o documentation -> texinfo? doxygen?
    merge the documentation with doxygen-docs

o define HAM_EXPORT DECLSPEC _dllexport
    compile a shared library

--------------

Version 0.1.0 - first release!!

o komplettes review
    werden fehlerwerte korrekt propagiert?
    machen fehlerwerte immer sinn? z.b. in flush_all()
    was passiert mit fehlern beim flushen?
    was passiert mit fehlern in ham_close()?

x bbaum fehlerfrei
x TXN raus (wir können die txn's auch komplett
    für diesen release abschalten... man soll dafür ja ne spezielle version
    kaufen müssen)
x caching
x memory-mapped access
x in memory-datenbanken
x overwrite keys
x extended keys
x erzeugt .dll/.so
o performance vergleichbar mit berkeley-db
o compiliert unter linux, windows, darwin, 32bit und 64bit, unter windows
    mit mingw, icc, msvc, borland, watcom
o legal issues
o dokumentation: tutorial, interface, FAQ
o webseite
o stress-test-tool(s), das ALLE optionen durchprobiert
    mmap
    r/w
    in-memory
    verschiedene pagesizes
    grosse keys
    grosse blobs
o admin-tool(s) fuer dump, stats, repair
    o db_dump: 
        o key/daten dumpen
        o header dumpen
o KEINE valgrind-fehler!

-----------------------------------------------------
-----------------------------------------------------
-----------------------------------------------------
-----------------------------------------------------

o iteratoren (nicht in version 0.10)
    o in-memory-db: finden wir ne möglichkeit, normale datenbanken in 
        in-memory zu importieren und umgekehrt wieder zu exportieren? 
        das wäre genial
        --> geht mit iteratoren (erst release 2.0!):
            iterator from=db1.begin()
            while (from)
                db2.append(from)
                from.next()
        --> geht auch mit der enum-funktion, die jetzt schon drin ist

-----------------------------------------------------

o duplicate keys (nicht in version 0.10)
    jeder key bekommt einen dupcounter; der wird mit unsigned(-1) initialisiert
    beim einfuegen wird rekursiv abgestiegen. im leaf wird dann ein neuer key
    eingefuegt, mit dem dupcounter=existierender ("kleinster") key minus 1.

-----------------------------------------------------
-----------------------------------------------------


o extended keys
    o hash-table zum cachen der extended keys
        o insert
        o erase
        o replace
        o find
        o purge

o backend
    o darauf hinarbeiten dass später mal mehrere backends in einer datei
        sind, nicht nur eines

o blob
    o neu: header in jeder page mit blobid
    o header auch im verify prüfen

o debug
    o im debug-modus output wie gehabt; bei non-debug: statt file- und line
        nur "hamsterdb: " ausgeben

o filter
    generische filter, sowie 2 implementationen davon: ein encryption-codec 
    und ein zlib-codec
    arbeiten sie page- oder blob-basiert? evtl waere page-basiert besser, 
    denn dann koennten auch index-pages (bzw NUR index-pages) gefiltert 
    werden.
    (my_result_t) (*filter)(my_key_t *key, my_data_t *data, int direction);

o hash-tabelle
    @@@

o bindings 
    c++-wrapper (ähnlich stl? müsste möglich sein, aber
    schwer), python-db-modul, perl, java (alle swig?)

o asset-tool
    GUI und library für computerspiele

-----------------------------------------------------
-----------------------------------------------------

Version 0.2.0

o duplicate keys
o iteratoren
o bindings: C++, Python, Perl, PHP
o filter: encryption
o filter: compression

-----------------------------------------------------

Version 0.3.0

o database-environment (ein file fuer mehrere datenbanken, gesharter cache,
    geshartes file-handle, freelist etc)
    etc)
o hash-tabelle
o live reorganisation???

-------------------------- literature -----------------------
pB+ Trees prefetching B+ Trees 
[CGM01] Improving Index Performance through Prefetching. S. Chen, P.B. 
Gibbons, and T.C. Mowry. ACM International Conference on Management
of Data (SIGMOD), Santa Barbara, California, May 2001
[GL01] B-Tree Indexes and CPU Caches. G Graefe and P. Larson. International
Conference on Data Engineering (ICDE), Heidelberg, Germany, April 2001.
[RR00] Making B+ Trees Cache Conscious in Main Memory. J. Rao 
and K.A. Ross. ACM International Conference on Management of Data (SIGMOD),
Dallas, Texas, May 2000.

