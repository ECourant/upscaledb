
Legend:

o a pending  TODO item (normal priority)
. a pending  TODO item (low priority)
x a finished TODO item

-----------------------------------------------------------------------------

o new web page
    o add licensing stuff (need license in German, too!)
    o online-shop with Paypal integration
        o paypal-bild austauschen
        o preise prozentuell staffeln
    o add google analytics code
    o add google sitemap
    o check roadmap.txt for other TODO items

o recovery/journalling
    x design functionality 
    x design API
    x write roadmap
    o implement
        x identify code which needs logging
        x write logging module - with full unittest coverage!
            x when deleting logfiles: truncate to sizeof(header)!
            x txn must track the logfile it is writing to
                -> decide in txn_begin
            x log: count number of open/closed transactions in each file
                x unittest!
            x unittest: swap files when having more than 20 transactions
            x unittest: make sure that the transaction writes to the 
                correct file
            x decide when to make a checkpoint
                x my_log_checkpoint() must call ham_flush
                x after a checkpoint: clear the older file, swap file 
                    descriptors
                    x unittest!

            x implement remaining functions
                x LOG_ENTRY_TYPE_CHECKPOINT
                    x unittest!
                x LOG_ENTRY_TYPE_FLUSH_PAGE
                    x unittest!
                x LOG_ENTRY_TYPE_WRITE
                    x unittest!
                x LOG_ENTRY_TYPE_OVERWRITE
                    x unittest!
                x test with valgrind

            x fix TODOs in log.h/log.c (and assert the fixes with unittests)

        x recovery process/logfile iteration
            x when opening the log files: decide which file is "older"
                -> check the lsn's
                -> "older" file becomes file[0]
                    x unittests!
            x iterate backwards over the two file(s) - needs changes in
                the file format; the header of an entry must be stored
                AFTER the entry itself
                x test with multiple entries
                    x with empty log
                    x with just one entry
                    x with multiple entries
                    x after file swapping
                    x after second file swapping
                    x with data
                x when opening logfiles: read the LAST bytes to get the
                    lsn, don't read from the beginning!
                    x unittests

        x new flag HAM_ENABLE_RECOVERY for ham_create und ham_open
            x don't allow in combination with HAM_IN_MEMORY_DB and
                HAM_DISABLE_FREELIST_FLUSH and HAM_WRITE_THROUGH
            x non-persistent flag!
            x for db-functions (ham_create_ex, ham_open_ex)
                x unittests
            x for env-functions (ham_env_create_ex, ham_env_open_ex)
                x unittests

        o add log-entries to all operations
            o need an idea how to test these!
                o need a (undocumented) flag for ham_close which does not 
                    delete the logfile on close (ham_log_close(log, TRUE))
                o each unittest creates a vector<log_entry_t> with the
                    expected logfile entries
                o it then executes the database commands
                o and then compares the logfile with the vector
            o ham_txn_begin
                o unittest
            o ham_txn_abort
                o unittest
            o ham_txn_commit
                o unittest
            o btree.c: my_fun_create
            o btree.c: my_fun_flush
            o see /home/chris/prj/hamsterdb-meta/recovery.txt for further 
                TODOs
                o extensive unittests and reviews!

        o recovery process
            o when opening, and logs are not empty: return error
                HAM_NEED_RECOVERY
            o new flag HAM_AUTO_RECOVERY - not allowed in combination
                with HAM_READ_ONLY etc
            o after recovery, don't forget to clear both files and
                reset lsn to 1!
            o when the flag is found: open the main file, open the 
                log files; avoid the cache, directly write to the file.
                then close the database, and re-open everything from 
                scratch

        o ham_flush must insert checkpoint, if possible (-> if the
            first logfile has no more open transactions)

    o currently, checkpoints are written every 20 or so transactions;
        try to find a better number

    o new error code HAM_LOG_INV_FILE_HEADER
        o add to ham_strerror
    o add documentation

    o new API function ham_set_checkpoint(), or extend ham_flush()
        with new flag HAM_SET_CHECKPOINT??

o new API function to retrieve the flags of a database

-----------------------------------------------------------------------------

. Python wrapper 
    -> http://docs.python.org/ext/ext.html
    -> http://www.python.org/doc/faq/extending/
    -> http://docs.python.org/dist/dist.html

. Perl wrapper

. PHP wrapper

-----------------------------------------------------------------------------

. tests are failing because of a berkeleydb bug:
    --duplicate=1 --use-cursors=1
      o ../../testfiles/1/100.tst - status mismatch
      o ../../testfiles/1/202.tst - status mismatch
      o ../../testfiles/1/220.tst - status mismatch

