I Am Legend:

Items are sorted by priority (highest on top).
o a pending  TODO item (for the current release)
. a pending  TODO item (for future releases)
x a finished TODO item

-----------------------------------------------------------------------------
This Branch Is About Integrating The hamsterdb2 Functionality!!!!!
-----------------------------------------------------------------------------
The big headline is:
As a user i want to run many Transactions in parallel with high performance.
I'm using multiple threads b/c my CPU has multiple cores, and expect hamsterdb
to scale with the number of cores.
==============================================================================

high-level plan for 2.1.7 ..................................................
o simplified btree SMOs
o delta updates

--------------

x Separate/Refactor SMOs: we want to run them separated from the actual
    operation in order to move them to the background sooner or later. Also,
    the erase SMOs are causing issues and have huge complexity but do not have
    many benefits.

x there'S a bug (already in 2.1.6)
    ./ham_bench --use-berkeleydb=true --reopen=true --key=binary --keysize=64 --pagesize=1024 --recsize=0 --bulk-erase --cache=104857600 --stop-ops=25000
    ./ham_bench --use-berkeleydb=true --reopen=true --key=binary --keysize=64 --pagesize=1024 --recsize=0 --open --cache=104857600 --stop-ops=25000
    ./ham_bench --use-berkeleydb=true --reopen=true --key=binary --keysize=64 --pagesize=1024 --recsize=0 --open --erase-pct=100 --cache=104857600 --stop-ops=25000
    ./ham_bench --use-berkeleydb=true --reopen=true --key=binary --keysize=64 --pagesize=1024 --recsize=0 --open --bulk-erase --cache=104857600 --stop-ops=25000

    x the overflow chain and state is not cleaned up properly if the
        new state is empty
    x needs more test

. web-page requires updates
    x deployed html differs from git-repository
    o www1-repository and hamsterdb-www should be identical
        o updates for 2.1.6 are missing
        o samples fehlen
        o download-dateien fehlen
        o doku fehlt
    o download/sources: add erlang, remove 1.x
    o www1
        o merge git repository of www1 (host on github, keep remote branch)
        o clean up 'dl' directory
        o where to host static files?
        o backup and deploy to www2, use round-robin DNS

o delta updates (DU)
    x insert SMOs (splits) are applied when "going down"
        x make sure that all tests are still running
        x also check monster tests
    x erase SMOs are vastly simplified (only delete pages; no merges, no shifts)
        x leaf nodes can become empty
        x internal nodes must at least set ptr_down
        x when going down: only merge pages if they have the same parent and
            if they are both (nearly) empty
        -> in the end there's a btree skeleton with empty leafs and nearly-
            empty nodes; this can then be compact()ed offline or asynchronously
        x get rid of shifting and replace_key
        x BtreeImpl/Proxy: remove shifts, replace_key etc
        x also merge with the left sibling
        x check the monster tests

        x review BtreeImplDefault::requires_split
            -> causes segfaults because insert() assumes that there's enough
                space in the node. how to fix this?
                instead of 32 bytes, use...
                - fixed key length if keys are fixed length (but min. 16 bytes)
                - extkey-threshold if keys are variable length

    x test everything
        x run unittests tests
        x run recovery tests
        x run valgrind tests
        x run monster tests
        x run performance tests

    x is there a cheap way to visualize the tree?
        -> yes: http://www.graphviz.org/content/datastruct
        dot -Tpng -o test.png ~/test
        x embed into ham_db_check_integrity (add |flags| parameter)
        x check with multi-level (> 4) trees and bulk-erase
            -> only the lowest two levels should become empty

    x the erase algorithm only merges leaf nodes; if the tree has more than 2
        levels then it will not degenerate properly when all entries are
        deleted.
        x is this a problem? what if data is then re-inserted? -> seems
            to be fine, but needs more tests

x there's a bug (already in 2.1.6)
    ./ham_bench --key=binary --keysize=64 --pagesize=1024 --recsize=0 --bulk-erase --stop-ops=25000
    ./ham_bench --key=binary --keysize=64 --pagesize=1024 --recsize=0 --open --stop-ops=25000
    ./ham_bench --key=binary --keysize=64 --pagesize=1024 --recsize=0 --open --erase-pct=100 --stop-ops=25000
    ./ham_bench --reopen=true --key=binary --keysize=64 --pagesize=1024 --recsize=0 --open --bulk-erase --stop-ops=25000

    x the overflow chain and state is not cleaned up properly if the
        new state is empty
    x needs more test

    x --key=binary --keysize=64 --pagesize=1024 --recsize=0 --bulk-erase --distribution=descending --extkey-threshold=20 --recsize=0 --stop-ops=100000 --seed=1393420356
    x --key=binary --keysize=64 --pagesize=1024 --recsize=0 --bulk-erase --distribution=random --extkey-threshold=20 --recsize=0 --stop-ops=100000 --seed=1393420495

x another bug
    ./ham_bench --key=binary --keysize=64 --pagesize=1024 --recsize=0 --bulk-erase --stop-ops=25000 --seed=1393445737
    ./ham_bench --key=binary --keysize=64 --pagesize=1024 --recsize=0 --open --stop-ops=25000 --seed=1393445737
    ./ham_bench --key=binary --keysize=64 --pagesize=1024 --recsize=0 --open --erase-pct=100 --stop-ops=25000 --seed=1393445737
    (next line is repeated 3 times, 3rd time crashes)
    ./ham_bench --reopen=true --key=binary --keysize=64 --pagesize=1024 --recsize=0 --open --bulk-erase --stop-ops=25000 --seed=1393445762

x improve: ./ham_bench --recsize=1048576

. web-page requires updates
    x deployed html differs from git-repository
    x download/sources: add erlang, remove 1.x
    x www1-repository and hamsterdb-www should be identical
        x updates for 2.1.6 are missing
        x samples fehlen
        x doku fehlt
        x download-dateien fehlen
    o www1
        x www1 and www2 are already combined in a single remote target
        o 'htdocs' should push to staging.hamsterdb.com
        o if everything works then also to hamsterdb.com
        o merge all repositories (host on github, keep remote branch)
            hamsterdb-www is the main repository, master pushes to staging
            'stable' pushes to hamsterdb.com, www1, www2
        o clean up 'dl' directory
        o where to host static files?
        o activate www1, www2

o Improve transaction delta updates
    x improve transaction structures, decouple them
        x update to new rb-tree if available - nope
        x each TransactionUpdate should be a single allocation
        x Transaction should be a single-linked list
            head is the chronologically oldest txn
            tail is the chronologically newest txn
            append new transactions at tail
            flush them from head
        x temp. transactions should not be required for read-only ops
            x db::find
            x cursor::find
            x cursor::get_record_count
            x cursor::get_record_size
            x cursor::move
        x temp. transactions must not write to the journal
            x for insert/erase and all cursor functions
            x recovery: must accept updates w/ txn-id 0 (for temp. transactions)
            x add new test
        x more code cleanups
            x split LocalTransaction, RemoteTransaction?
            x txn_begin returns Transaction*; txn_commit and txn_abort ret. void
            x move logic from env to txn
            x check TODOs in txn_remote.cc
        x check_integrity should not require a |txn| parameter
        x improve splits of txn logic vs. btree logic, i.e. in
            x check_insert_conflicts et al; need a very clear separation of
                code, otherwise locking will be very tricky

    o do not flush committed transactions as long as their data consumption
        does not exceed a certain size, or the number of elements is not
        too high
        x log file must not be switched before the txn is flushed!
        x ham_env_flush and when closing: flush EVERYTHING
        x flush immediately if HAM_FLUSH_WHEN_COMMITTED
        x set threshold through an internal (global) variable
        o add unittest
            for i in 0 .. 30:
                env = create
                txn = begin
                for j in 0 .. i:
                    insert(txn, j)
                commit txn
                close env

                env = open
                # verify that all keys were inserted
                close env
        o expose new flag and/or parameter
            o dotnet
            o java
            o erlang
            o ham_bench
        o add to monster test, valgrind test, performance test

        o then apply the committed transactions page by page (is this
            possible??), and later even asynchronously
        o can we combine multiple operations in the same changeset??
            -> only if they're for the same database! (really?? why?)
            -> also, we need to remove many asserts...? :-/

    o allow use of Transactions without journalling/recovery
        o needs (documented!) feature in ham_bench
        o needs documentation in header file
        o needs monster tests, performance tests, valgrind tests

    o think about delta updates managed in the BtreeNode
        o do not buffer "append" operations because they are not costly
        o totally transparent to the caller
        o requires_split() takes delta updates into account
        o when flushing a TransactionOperation, the TransactionOperation could
            just be removed from the TxnTree and attached to the node
        o needs an efficient merge algorithm

    o how would a bulk update API look like??

o QuickCheck:
    o extend existing test with overwrite and duplicates
    o new test: create a database with generated configuration; use
        insert/erase/find/close/open; use very low pagesize with large
        key size, if possible; also use multi-page blobs
    o boost the existing tests and create much larger sequences; no issue
        if each test runs for an hour or more

o PageManager state: also store m_last_blob_page_id persistently
    (try not to break backwards compatibility, though)

o Make cursor cleanup logic after erase less cheesy
    if a key is erased (remove_entry) then all cursors are uncoupled.
    Shortly afterwards, they're coupled again for the points_to() check.
    -> assert(slot < get_count()) in btree_node_proxy/get_key

o improve integration of static code analysis in release process
    o oclint
    o coverity

. come up with a list of all functions, define which locking operation
    is required; then review the code and make sure this will work
. come up with a list of functions for which concurrency makes most sense
    - flushing transactions asynchronously
    - purging caches asynchronously
    - have concurrent lookups/find

----------------------------------

o reduce the linked lists - they're hard to be updated with concurrent
    operations
    o page
    o transaction and dependent objects
    o ...

o separate SMOs from the actual operation (#2)
    -> check the literature
    http://pdf.aminer.org/000/409/763/b_trees_with_relaxed_balance.pdf
    o move SMO operations to "the janitor" (btree_smo.h)

o can we come up with olap functions that operate directly on the btree data?
    -> working on keys only!! does that make sense? - yes, absolutely
    - should be nested, i.e. TOP(20, SELECT(SELECT(t1, p1), t2))
    o MIN()
    o MAX()
    o TOP(N, predicate)
    o COUNT(predicate)
    o AGGREGATE(predicate, result)
    o AVERAGE(predicate, result)
    o SELECT(predicate, callback)
    o MAP(predicate, callback, result-callback)
    o FOLDL
    o FOLDR
    o JOIN(predicate, other table, join-callback, result-callback)
    -> look for erlang map functions (foldl, foldr etc) for interfaces
    -> the SELECTs should return VIEWs which then can used as input for other
        SELECTs; this way users can build a "tree" of statements:
        SELECT(callback1,
            JOIN(callback2, table1,
                SELECT(callback3, table2)))
    -> allow database operations while such a process is performed
    -> use lua to specify operations on a higher level??


- prefetch cache lines when searching
- linear SIMD search -> PRO
- compress the log with snappy -> PRO
- compress the records with snappy -> PRO
- encrypt the log and the environment file with AES -> PRO
- hot backups (vacuumizes to a different file) -> PRO
- bulk updates -> PRO
    - give users API to allocate memory for keys/records
    - if user says that data is already sorted then do not re-sort
    - add those delta updates to the txn-trees or to the stream
- first PRO release
    o webpage updates, PR, mailings

- compression -> PRO
- cache-oblivious page distribution?
    http://supertech.csail.mit.edu/cacheObliviousBTree.html
- bloom filter -> PRO
- concurrency
- operations on compressed data (COUNT(), MIN(), MAX(), ...)?
- C-Store style projections? (requires complex schema types)
    - introduce a new library with complex schema types, projections
    - analytic functions
        count, min, max, sum, product, average, ln, sqrt, exp, round, trunc,
        date/time functions and interval functions
    - select(predicate_t, column_descriptor_t, select_state_t)
             \- an AST of functors
                          \- existing columns or generated columns (i.e. sum())
                                                \- keeps track of offset, count
    - erase(predicate_t)
    - explain(predicate_t, column_descriptor_t)

o introduce PRO version
    o start a closed repository
    o one source base with different licensing headers, different licensing
        string (also for tools), different version tag
    o API to get licensee information (is_pro_version())
    o new release process
    o prebuilt win32 files
    o get rid of serial.h - it's not really required and only creates efforts
    o how to share files with customers? need a login area,
        downloadable, customized files (win32, serial.h, tarballs...)
        -> send out mails if a new file is available
    o evaluation license: build binaries for the most common architectures
        o insert expiration date checks
        o special copyright strings
        o prebuilt for win32/win64
        o unix: obfuscated source code
        o need an automated flow for signups, for evaluation licenses etc
    o extra documentation
    o define file format interoperability?
    o what are the minimum features required for the first release?
        - (evaluation licenses)
        - prefix compression for strings
        - lightweight compression for binary keys
        - SIMD for searches
        - AES encryption
        - hot backups

o PRO: btree can compress keys
    x get rid of the whole minkey/maxkey handling because these numbers
        are irrelevant with compression
    o try to reduce the changes to a new KeyProxy object
    o prefix-compression for strings
        o each 2kb have a full string (indexed by skiplist)
    o delta-compression for numeric data types (>= 32bit)
        (can this be combined with a bitmap compression? the deltas are
        compressed in a bit-stream? but then we end up with variable
        length encodings...)
    o lightweight compression for keys
        http://oldhome.schmorp.de/marc/liblzf.html
        http://lzop.org
    o record compression for blobs (lzop.org? snappy?)
        better postpone this and compress all pages in the lss
    o do we need delta updates for efficient inserts? - i think not yet...

o PRO: use SIMD for fixed-length scans and __builtin_prefetch
    o use valgrind to track cache misses
    http://pcl.intel-research.net/publications/palm.pdf
    http://www.cs.toronto.edu/~ryanjohn/teaching/csc2531-f11/slides/Ioan-SIMD-DBMS.pdf
    http://gcc.gnu.org/onlinedocs/gcc-3.3.6/gcc/Other-Builtins.html
    http://stackoverflow.com/questions/8460563/builtin-prefetch-how-much-does-it-read
    http://tomoyo.sourceforge.jp/cgi-bin/lxr/source/include/linux/prefetch.h
    http://stackoverflow.com/questions/7327994/prefetching-examples
    o use linear search with fixed length keys (if max-keys-per-page
        or the subrange in the binary search is low enough, and if the
        performance makes sense) -> also for MIT
    o if both layouts use binary search then move it back to the proxy!

o use cache-oblivious b-tree layout
    o see roadmap document for more information
    o run a performance test/prototype if this is worth the effort
        o allocate a fixed number of pages (20) for the index
        o PageManager: when allocating a new page then use the distribution
            function to fetch a page from the reserved storage
    o this feature is *per database*
    o calculate number of reqd pages based on estimated keys from the user
    o make sure that this is not reverted when "reduce file size" feature
        (above) is enabled
    o the new pages are not managed by the freelist! therefore the freelist
        will not need any modifications
    . try to batch allocations; when new pages are required then don't just
        allocate one but multiple pages (if the database is big enough)

. clean up approx. matching
    o ONLY for cursors
    o Flags: HAM_FIND_LT_MATCH | HAM_FIND_GT_MATCH | HAM_FIND_EQ_MATCH (default)
    o lookup: the cursor is coupled to the key, even if the lookup fails
        then perform a lookup:
            found_key == requested_key:
                HAM_FIND_EQ_MATCH: ok
                HAM_FIND_LT_MATCH: return move_prev()
                HAM_FIND_GT_MATCH: return move_next()
            found_key < requested_key:
                HAM_FIND_LT_MATCH: ok
                HAM_FIND_GT_MATCH: return move_next()
                HAM_FIND_EQ_MATCH: key not found
            found_key > requested_key:
                HAM_FIND_GT_MATCH: ok
                HAM_FIND_LT_MATCH: return move_prev()
                HAM_FIND_EQ_MATCH: key not found
    o must work with transactions
    o do not store key flags; the caller has to compare the key
    o remove ham_key_set_intflags, ham_key_get_intflags, key->_flags (?)

. win32: need a release-v2.pl which fully automates the various release steps
    o delete all generated protobuf files
    o build for msvc 2008
    o run unittests for debug and release
    o run samples
    o delete all generated protobuf files
    o build for msvc 2010
    o run unittests for debug and release
    o run samples
    o build release package

. also remove locking from C# and Java APIs

------------------- idea soup ---------------------------------------------

o btree_impl_default::set_record: if the duplicate is LAST of the last key
    in the node then simply append the record and increase next_offset

o asynchronous prefetching of pages
    -> see posix_fadvice, libprefetch

o flush transactions in background (when the btree is concurrent)

o Improve leaf pages caching
    Store start/end key of each leaf page in a separate lookup table in order
    to avoid btree traversals. This could be part of the hinter.
  - one such cache per database
  - should work for insert/find/erase

o allow transactions w/o journal

o allow transactions w/o recovery

o when recovering, give users the choice if active transactions should be
    aborted (default behavior) or re-created
    o needs a function to enumerate them

o when flushing the Changeset: batch ALL changes for the WHOLE transaction,
    then flush all of them together. This way we can "merge" multiple changes
    for the same page.
    Also review the whole flush process - when not to log etc.
    - only 1 page affected: no need to log it because it is idempotent
    - freelist pages are always idempotent
    - more than 1 index page? not idempotent (most likely)
    - more than 1 blob page? not idempotent (maybe)
    o define a few benchmarks
    o be careful: if N operations are modifying the same changelog, and
        then #N+1 aborts then the aborting operation must NOT clear the
        changelog!

o A new transactional mode: read-only transactions can run "in the past" - only
    on committed transactions. therefore they avoid conflicts and will always
    succeed.

o changeset: instead of simply adding pages to the changeset, the caller
    could already specify whether this page needs logging or not;
    i.e. after freelist rewrite, the blob pages do not need logging if a
    blob is deleted  

o is there a way to group all changeset flushes of a Transaction into one
    changeset, and batch-commit multiple commits? that way we would avoid the
    frequent syncs and performance would be improved
    o would have to remove all of assert(changeset.is_empty())
    o but we can use that assert prior to txn_begin

o flush in background (asynchronously)
    o need new flag file HAM_DISABLE_ASYNCHRONOUS_FLUSH
    o if in-memory database: disable async flush
    o if transactions are disabled: disable async flush
    o if enabled: create background thread, wait for signal
    o ham_env_flush: if txn are enabled then try to flush them to disk
    o how to deal with an error in the background thread???
        o store in Environment, then return in every exported function
    o default: async flush is OFF!

    o extend monster tests
        o with async flush
        o without async flush
        o extend/run performance test
        o run monster tests

    o documentation
        o tutorial
        o faq

o need a function to get the txn of a conflict (same as in v2)
    ham_status_t ham_txn_get_conflicting_txn(ham_txn_t *txn, ham_txn_t **other);
        oder: txn-id zurückgeben? sonst gibt's ne race condition wenn ein anderer
        thread "other" committed/aborted
    o also add to c++ API
    o add documentation (header file)
    o add documentation (wiki)

. new test case for cursors
    insert (1, a)
    insert (1, b) (duplicate of 1)
    move (last) (-> 1, b)
    insert (1, c)
    move (last) (-> 1, c)? is the dupecache updated correctly?

. there are a couple of areas where a btree cursor is uncoupled, just to
    retrieve the key and to couple the txn-key. that's not efficient
        db.c:__btree_cursor_points_to
        db.c:__compare_cursors
        txn_cursor.c:cursor_sync
        txn_cursor.c:cursor_overwrite
    o move to a separate function
    o try to optimize

. add tests to verify that the cursor is not modified if an operation fails!
    (in cursor.cpp:LongTxnCursorTest are some wrapper functions to move or
    insert the cursor; that's a good starting point)

. new flag for transactions: HAM_TXN_WILL_COMMIT
    if this flag is set, then write all records directly to the file, not
    to the log. the log will only contain the rid.
    -> or: make this the default; call the new flag HAM_TXN_MAYBE_WILL_ABORT
    o in case of an abort: move the record to the freelist
    -> this affects all temporary ham_insert-transactions
    (not sure if this should get high priority)

. if memory consumption in the txn-tree is too high: flush records to disk
    (not sure if this should get high priority)

o ham_get_count: could be atomically updated with every journal entry

=======
>>>>>>> Updated TODO
