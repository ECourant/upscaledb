
Legend:

o a pending  TODO item (normal priority)
. a pending  TODO item (low priority)
x a finished TODO item

-----------------------------------------------------------------------------

o new web page
    x translate license to german
    x frontpage picture: replace "embeddable" with "embedded"
    o for the last time: check all links

    o add google analytics code
    o add google sitemap
    o update documentation for C/C++
    o add documentation for Java
    o add documentation for .NET (chm file)
    o add samples for Java
    o add samples for .NET
    o add samples for Python

o recovery/journalling
    x design functionality 
    x design API
    x write roadmap
    o implement
        x identify code which needs logging
        x write logging module - with full unittest coverage!
        x recovery process/logfile iteration
        x new flag HAM_ENABLE_RECOVERY for ham_create und ham_open
        x need new error code HAM_NEEDS_RECOVERY
        x if log is enabled, create a log object
        x if log is enabled, close the log
        x add log-entries to all operations
        x remove transactions from freelist routines
        x rewrite logging to be page-based

        o ham_txn_abort: if a page is dirty, walk backwards through the log
            and fetch the first before-image (or after-image of a committed
            txn) and overwrite the page
            o unittests

        o recovery process
            x new flag HAM_AUTO_RECOVERY - not allowed in combination
                with HAM_READ_ONLY etc
                x implies HAM_ENABLE_RECOVERY
                x implement for ham_open(_ex), ham_env_open(_ex)
            x unittests:    
                x "corrupt", w/o AUTO_RECOVERY -> NEED_RECOVERY
                x "corrupt", w AUTO_RECOVERY -> success
            x after recovery, don't forget to clear both files and
                reset lsn to 1!
                x unittests!
            o walk backwards through the log and undo all actions which were
                not committed, but flushed, and redo all actions which were
                committed, but not flushed

    o new error code HAM_LOG_INV_FILE_HEADER
        o add to ham_strerror
    o add documentation

o log_entry_t currently has a field "prev_lsn" - really needed?
    if not, remove it

o a freelist-test fails (FreelistTest::markAllocOverflow4Test)

o new API function to retrieve the flags of a database (ham_get_flags(db))
    o also for environment? (ham_env_get_flags(env))
    o unittests
    o documentation
    o add to samples/db2.c

. more unittests for freel_alloc_page() (pimp freelist.cpp:markAllocAlignedTest)

. scenario: created with log, a few inserts; crash (dbfile is ok,
    but logfile is not empty)
    then opened *without* log, another few inserts, closed
    then opened *with* log, log is not empty -> recovery but logfile
    state is no longer valid! must we store the lsn in the database
    header? or is this a case of PEBCAC?

. HAM_AUTO_RECOVERY not allowed at ham_create(_ex), ham_env_create(_ex)
    o unittests

. new API function ham_set_checkpoint(), or extend ham_flush()
    with new flag HAM_SET_CHECKPOINT??

. new flag HAM_SKIP_RECOVERY - not allowed in combination
    with HAM_AUTO_RECOVERY etc

. unittests should not fail if compiled with NO_COMPRESSION

. unittests should not fail if compiled with NO_ENCRYPTION

. new configure switch --force-lsb-compliancy (ohne pread, pwrite)

-----------------------------------------------------------------------------

. Perl wrapper

. PHP wrapper

-----------------------------------------------------------------------------

. tests are failing because of a berkeleydb bug:
    --duplicate=1 --use-cursors=1
      o ../../testfiles/1/100.tst - status mismatch
      o ../../testfiles/1/202.tst - status mismatch
      o ../../testfiles/1/220.tst - status mismatch

