 
I Am Legend:

Items are sorted by priority (highest on top).
o a pending  TODO item (for the current release)
. a pending  TODO item (for future releases)
x a finished TODO item

-----------------------------------------------------------------------------

x update the .NET API 

x server: first step
    x need configure switch to disable the server
    x need 3rdparty stuff
        x add json to 3rdparty
        x add mongoose to 3rdparty
    x define/implement public API
        x implemented
        x need mutex/critsec to protect use of environment!
    x open environments/databases are used through url /envname/ (/dbname/)

o client/server communication
    x abstract env functions into "class" (like backend)
    x separate local code into env.c
    x configure.in: check for protocol buffer - if not available: build without
            remote access!
    x configure.in: check for libcurl - if not available: build without
            remote access!
    x need configure switch to disable the remote client
    x if file starts with "http://" then switch to remote client
    x separate remote code into remote.c
    o implement with google protocol buffers
        x ham_env_create_ex
        x ham_env_close
            x unittest 
        x ham_env_open_ex
            x unittest
        x ham_env_get_parameters
            x unittest
        x ham_env_get_database_names
            x unittest
        x ham_env_flush
            x unittest
        x ham_env_rename_db
            x unittest
        x ham_env_enable_encryption
            x unittest
        x ham_env_create_db
            x unittest
        x ham_env_erase_db
            x unittest
        x ham_close (needs to delete cached db handle in the server!)
            x unittest
        x ham_env_open_db
            x unittest

        x ham_get_parameters
            x unittest
        x ham_enable_compression
            x unittest
        x ham_flush
            x unittest
        x ham_calc_maxkeys_per_page - needed? i guess not...

        x ham_txn_begin
            x unittest
        x ham_txn_commit
            x unittest
        x ham_txn_abort
            x unittest
        x ham_check_integrity
            x unittest
        x ham_get_key_count
            x unittest

        x ham_insert
            x needs implementation in remote.c, server
            x recno: key data is modified (if key->size==8 und
                    HAM_RECORD_NUMBER); memory must be allocated
                x should work - i moved it to hamsterdb.c
                x make sure that the recno is copied back into the key
                x implement the server
            x partial inserts
        x ham_find
            x implemented in db.c
            x needs implementation in remote.c, server
            x respect USER_ALLOC pointers!
            x approx matching: modifies key-flags
            x partial finds
        x ham_erase
            x implemented in db.c
            x needs implementation in remote.c, server
            x unittest: insert, find, erase, find
            x unittest: insert, find, erase, find (useralloc)
            x unittest: insert, find, erase, find (for recno)
        x unittest for partial inserts

        x when opening(=creating) a database: the reply has to return the
            database flags! (i.e. recno)

        x if the same database is opened twice, the same handle has to be 
            returned (currently, an error is returned - DB_ALREADY_OPEN)

        o ham_cursor_clone
            o unittest
        o ham_cursor_overwrite
            o unittest
        o ham_cursor_move
            o unittest
        o ham_cursor_find
            o unittest
        o ham_cursor_find_ex
            o unittest
        o ham_cursor_insert
            o unittest
        o ham_cursor_erase
            o unittest
        o ham_cursor_get_duplicate_count
            o unittest
        o ham_cursor_close
            o unittest
        o ham_close: needs to AUTOCLOSE existing cursors
        o ham_close: needs to AUTOABORT existing txns
        o ham_close: needs to AUTOCOMMIT existing txns
        o call curl_global_cleanup() (not threadsafe!!)
        o check for memory leaks!
    o add documentation!

o HAM_PARAM_GET_STATISTICS -> hamsterdb_int.h!

------------------------------ (this release is unstable!) -----------------

o release new .NET wrapper with fix from a.todorov (-> nabble)

------------------------------

o unittest crashes:
    env=ham_env_create()
    db=ham_env_create_db(RECNO)
    insert(RECNO, key[0, 0]) => will call db_resize_allocdata()
    ham_close(db)
    ham_env_close(db)
    ham_delete(db) => will call db_resize_allocdata(0), but allocator was
        already freed!

o fix freelist page overflow when searching for bits (See mail from Stefan)
    -> is this still relevant??

o more remote stuff
    o unittest for approx matching

    o add Windows stuff
    o add acceptance tests

    o unittest: negative insert, negative find, negative erase

    o test with big blobs!
    o messages-pb.c must be created dynamically because it depends on 
        the google protocol version
    o check_create_parameters -> move to env.c??
    o my_free_cb is duplicated in env.c und hamsterdb.c!

    o functions in env/db.c and remote.c should never use
        db_set_Error!

    o unittest: ham_env_create_db w/ extended params

    o how is the daemon safely shut down? -> before exiting, we have to
        close the environments!

o mongoose: 
    o make sure connections are not closed immediately (keep-alive)
    o add license to readme!
    o mongoose - disable default handler (returns file listing!)

o server: second step
    o unix daemon (also running in foreground!)

    o daemon/service: what about logging? we have at least to log errors

    o need configure switch to disable the local client
        -> also clean up db.h, env.h...

    o add tests for --disable-remote and --disable-local to release.sh

    . windows service: command line switches -install, -start, 
        -stop, -uninstall!
    . configuration file: no default path; is set by command line parameter
        o use to specify the port
        o use to specify available databases/Environments and their url
        o every! configuration option can be used programmatically!
        o default is read from built-in json string
            o all other sources are "merged" and ONLY overwrite, but do NOT
                add new strings!
            o unknown strings are ignored (print warning!)
    . install a callback for authentication (and offer a predefined
        callback for SSL?)
    o support https?

o need win32 project for the server

o also allow json for the protocol (??)

o documentation in hamsterdb.h
    o ham_insert: does not list HAM_HINT_APPEND/PREPEND,
        no mentioning of sorted duplicates
    o ham_txn_begin: has no comments, just parameters
    o ham_open_ex: dito
    o ham_create_ex: dito
    o ham_open, ham_create, ham_env_open, ham_env_create: should be 
            deprecated???

o test the following:
        db=ham_create()
        env=ham_get_env(db)
        ham_env_close(env) ???


o also look at Ger's sources

o update the Python API 

. create abstraction layer for local Environments/Databases and remote
    Environments/Databases
    o move every local function to local.c

. network-server (use apr, protocol buffers)
    > Maybe you could consider taking one of those tiny portable httpd apps out
    > there and jack hamsterdb into it's back, so you get to talk 'hamster over
    > HTTP[S]' for low cost? Several high perf, low feature count httpd
    > microservers out there. Haiwatha pops up as a name, but there's several of
    > those buggers around, including ones that have been specifically designed
    > for multithreaded high I/O bandwidth (async I/O on Win32/64 !! ). hamsterdb
    > is single-thread right now, but it's gonna be multithreaded one day anyhow.
    > And taking such a mini server would save quite a bit of tuning and dev work.
    > Sometimes copy&use is best.

    i.e. use mongoose?

. network-client (use apr, protocol buffers)

. pure java network client

o update win32 files to 2008

. WinCE: create and run Unittests project
    http://msexchangeteam.com/archive/2004/02/23/78930.aspx
    o also, we could use mmap (which is currently disabled)

. some tests in filter.cpp are deactivated - fix them

. run profiling for duplicate tests - can things be improved?
    o blob_overwrite/duplicate table handling: in some cases we can use
        HAM_DIRECT_ACCESS to speed up things (at least for in-memory)

. webpage changes
    http://www.purenetworks.com/
    http://www.omegathemes.com/tf/smartages/#
    http://eucalyptus.com/
    x the header page image is too large
    o frontpage: have multiple images (scrolling in background) with more
        text info? 
        http://malsup.com/jquery/cycle/basic.html
        http://www.sohtanaka.com/web-design/examples/image-slider/
        http://www.slidedeck.com/
    o sitemap: pulldown with jquery
    o download: need download gates to track in analytics as goals
    o rss feed

. improve documentation/tutorial/faq about
    o confluence is too slow on this server :( Need something else...
    o move some of the documentation and tutorial to a Wiki
        o tutorial (remove from doxygen)
        o samples (remove from doxygen)
        o faq (remove from doxygen)
        o internal developer documentation (remove from doxygen)
    o tutorial/faq: add hinting flags
    o tutorial/faq: add DAMs

. add automatic code coverage using gconv
    http://www.manpagez.com/man/1/gcov/
    http://gcc.gnu.org/onlinedocs/gcc/Gcov.html
    http://aleccolocco.blogspot.com/2009/08/sqlite-lesson-in-low-defect-software.html (section "Test Coverage with GCC")
    o track coverage results, publish online
    o gui tools: http://code.google.com/p/trucov/,
                 http://sourceforge.net/projects/ggcov/files/ 

. remove HAM_HINT_UBER_FAST_ACCESS, HAM_HINT_RANDOM_ACCESS, HAM_HINT_SEQUENTIAL

. ham_flush: deprecate, replace w. ham_env_flush? it's already implemented
    o need unittests!?

. evaluate if we can use bamboo for building and testing on multiple
    platforms
    o http://www.atlassian.com/software/bamboo/features/elastic.jsp#remote
    o install server
    o setup several agents (win32, win64, linux x86, linux x86_64, ...) and
        run either all or only some of the tests, including valgrind!

o need tool to upgrade databases from 1.0.x to 1.1.x!

. ham_get_parameter: could return VERSION of the database

. approx. matching: need a sample

. Ger: can specify an initial file size

. how can we merge our ACID transactions/recovery prototype?
    - simplify insert algorithm
    - STRONGLY simplify erase algorithm
    - get rid of the physical logfile
    - use a logical logfile with the current txn implementation
    ----------
    - move limited txn implementation to rb-trees in memory
    ----------
    - add the full ACID stuff

. merge threadsafe code

. HighLevelTxnTest::rollbackHugeBlobTest is inactive because huge blobs are
    directly written to disk instead of going through the cache -> in case of
    a txn_abort, these blobs are not reallocated

. win32: check Ger's solution - he can handle multiple msvc versions

. Perl wrapper

. PHP wrapper


