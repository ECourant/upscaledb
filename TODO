

x branch in trunk kopieren, branch löschen

-----------------------------------------------------
-----------------------------------------------------

x memory mapped file-io
    x os_get_pagesize() für linux implementieren
    x was passiert wenn der persistent db-header nicht pagesize-aligned 
        ist? können die pages trotzdem mit mmap gelesen werden?
        --> nein, geht nicht; der db-header MUSS pagesize-aligned
        sein!
    x create:
        pagesize angegeben? 
            pagesize=os_pagesize?
                use_mmap=1
            sonst
                use_mmap=0
        pagesize nicht angegeben? 
            pagesize=os_pagesize
            use_mmap=1
    x open
        in-memory-db? -> fehler
        pagesize==os_pagesize?
            use_mmap=1
        sonst
            use_mmap=0
    x aufpassen: wenn die geladene DB eine andere pagesize als die 
        os-pagesize hat, read nehmen
    x DEFAULT_PAGESIZE in ham_config rausschmeissen

    x das txn-zeug ist total kaputt; wofür wird es wirklich gebraucht??
        wenn z.b. bei ham_insert ein key eingefügt wird, der schon 
        existiert, gibt's einen fehler. dadurch wird txn_abort 
        aufgerufen -> alle bisherigen änderungen in den pages 
        gehen verloren.

        was passiert in bsddb bei einem fehler? test machen mit vielen 
        inserts, dann die zugriffsrechte der datei auf read-only
        setzen; ist die db kaputt? --> keine ahnung, wie zum geier 
        kriegen wir das raus?? -> ich glaub es gibt einen fehler, aber
        die fehler sind wirklich schwer zu produzieren. das teil ist 
        rockstable.

    x testen, testen, testen bis es läuft

    x benchmarken - isses schneller als read/write? dazu sollten wir 
        vielleicht ein flag einfügen (HAM_DISABLE_MMAP).
        ./test  --db ../../../hamsterdb-tests/trunk/testfiles/db/45.tst
                --profile
        mit mmap:
            profile of backend hamster :    0.190000 sec
            profile of backend berkeley:    0.066000 sec

        ohne mmap:
            profile of backend hamster :    0.218000 sec
            profile of backend berkeley:    0.077000 sec

-----------------------------------------------------
-----------------------------------------------------

o test 03 hat memory leak
o test 45 hat memory leak

-----------------------------------------------------
-----------------------------------------------------

o in-memory-database
    o finden wir ne möglichkeit, normale datenbanken in in-memory zu 
        importieren und umgekehrt wieder zu exportieren? das wäre genial
        --> geht mit iteratoren (erst release 2.0!):
            iterator from=db1.begin()
            while (from)
                db2.append(from)
                from.next()

-----------------------------------------------------

o profiling! aber mit der release-version...
    o in-memory-db
    o os_mmap
    o read
    o verschiedene page- und keygrössen
    o nur inserts
    o nur inserts ohne blob
    o nur erase
    o nur lookup
    o auch gegen qdbm und andere backends
    o etc etc etc

-----------------------------------------------------
-----------------------------------------------------

o replace/overwrite keys

o extended keys
    o store_key(ham_key_t *key, internal_key_t *intkey);
    o load_key(internal_key_t *intkey, ham_key_t *key);
    o shift/insert/remove ext. keys (wie in btree.c)
    o wie verhält sich der default-comparator (bei ungleichen keygrössen)?
        1. memcmp auf prefix
        2. identisch? wenn ein key kürzer ist als der andere, und vollständig
            vorliegt: kurzer key ist "vorher"
        3. sonst keys nachladen, wie bei 2) weiter

    o eventuell wäre es gut, wenn die gebufferten extended keys global 
        gespeichert werden, nicht bei der page; dadurch müssen wir keine
        shifts/moves machen; nur wenn eine page komplett (aus dem
        cache oder der datei) gelöscht wird, müssen die keys raus; oder 
        wenn ein key-eintrag gelöscht wird. sonst gibt's keine weiteren
        operationen, und evtl können wir die geschwindigkeit halbwegs 
        schnell kriegen (hash-tabelle).
        o extkey_get(name, extkey *) - lädt notfalls key von der platte
        o extkey_remove(extkey *)
        o extkey_put(extkey *, name)

-----------------------------------------------------

o iteratoren (nicht in version 0.10)

-----------------------------------------------------

o duplicate keys (nicht in version 0.10)
    jeder key bekommt einen dupcounter; der wird mit unsigned(-1) initialisiert
    beim einfuegen wird rekursiv abgestiegen. im leaf wird dann ein neuer key
    eingefuegt, mit dem dupcounter=existierender ("kleinster") key minus 1.

-----------------------------------------------------
-----------------------------------------------------

o tests
    o test mit freelist
    o test mit mmap, verschiedene pagesizes
    o test mit read, verschiedene pagesizes
    o test mit in-memory-db, verschiedene pagesizes
    o os_mmap: macht segfault (nach split?)
    o os_mmap: datenbank-headerpage muss page-aligned sein
    o os_mmap: sinnvolle erkennung der pagesize und setzen von USE_MMAP
    o in-memory-database testen
    o verschiedene pagesizes/keysizes für
        o in-memory-db
        o os_mmap
        o read(2)

-----------------------------------------------------

o momentan werden alle pages auf null gesetzt (memset(page->pers->payload, 0))
    und zwar evtl sogar mehrmals (freelist!)
    raus damit!

-----------------------------------------------------

o doku
    o überarbeiten
    o erweitern

-----------------------------------------------------

o statistics
    will wissen wie viele freelist-hits/misses und cache-hits/misses es gab

    brauche bei den statistik-feldern die anzahl der aktuellen Keys in der
    Datenbank

    wird im sql gebraucht für AUTO_INCREMENT vom index und für eine schnelle
    Berechnung
    von MAX() über die ganze tabelle.

    allerdings wird das etwas tricky, sobald transaktionen dazu kommen - erst
    beim commit der transaktion muss der zähler inkrementiert/dekrementiert und
    auf platte geschrieben werden. erst sobald der erhöhte zähler wirklich auf
    platte geschrieben wurde, ist die transaktion abgeschlossen.

    jedoch ist das blöd, weil es dann immer einen zusätzlichen
    schreibzugriff gibt, sobald ein insert oder erase stattfindet. eher 
    sollte nach dem start geprüft werden, ob es einen absturz gab - 
    falls ja, werden die statistiken gelöscht, und on demand wieder 
    initialisiert. (diese ganze problematik kommt erst, wenn wir sql brauchen).

    Die MAX-Berechnung sollte recht simpel sein. Alle anderen Statistiken (z.b.
    total size von allen Datensätzen) werden teuer - die sollten nicht immer
    up-to-date gehalten werden, sondern nur on-demand vom cli-tool "ham_stats"
    ausgegeben werden).

o statistics
    get generic getter/setter for statistical value, i.e. 
        enum { CACHEHITS, CACHEMISSES, PAGES, FREEPAGES, ... };
        ham_u64_t statistics[8];
    set_stats_value(db, which, value): db->statistics[which]=ham_h2db32(value)
    ATTENTION: some of those values are specific for each backend, others
        are global; therefore we need two functions: 
        ham_get_global_statistics(stat)
        ham_get_index_statistics(index, stat)

-----------------------------------------------------

o nochmal durchgehen und die ganzen flags zusammenschreiben - 
    teilweise sind sie an verschiedenen stellen deklariert und benützt 
    - das ist momentan nicht sehr schön

-----------------------------------------------------

o get hamster version
    gibt's ne möglichkeit, die version der
    library abzufragen? klar - sie steht in einer header-datei
    aber die ist privat und kann nicht "von aussen" abgefragt werden. 
    evtl wäre eine exportierte funktion besser:
    
    ham_status_t ham_get_version(ham_u32_t *major,
            ham_u32_t *minor, ham_u32_t *revision)

-----------------------------------------------------

-----------------------------------------------------

o tools
    o ham_dump
    o ham_stats

-----------------------------------------------------

o configuration management: HAM_32BIT/HAM_64BIT, HAM_OS_POSIX/HAM_OS_WINDOWS
    automatisch während des build-prozesses erkennen; momentan 
    werden sie in ham/config.h gesetzt

o stress test mit zufällig fehlschlagenden io-funktionen und zufälligen
    OUT_OF_MEMORYs

--------------

o cache: bucketgrösse in ham_config.h verschieben, eine #define-konstante
    draus machen

--------------

o new flag for create/open: USE_FLOCK calls flock() around insert/erase 
        (makes mostly sense if cachesize==0)

o profiling: if a page is allocated, allocate more pages, then we have only
    one disk access

--------------

o documentation -> texinfo? doxygen?
    merge the documentation with doxygen-docs

o define HAM_EXPORT DECLSPEC _dllexport
    compile a shared library

--------------

Version 0.1.0 - first release!!

o komplettes review
    werden fehlerwerte korrekt propagiert?
    machen fehlerwerte immer sinn? z.b. in flush_all()
    was passiert mit fehlern beim flushen?
    was passiert mit fehlern in ham_close()?

x bbaum fehlerfrei
x TXN raus (wir können die txn's auch komplett
    für diesen release abschalten... man soll dafür ja ne spezielle version
    kaufen müssen)
o caching
o performance vergleichbar mit berkeley-db
o overwrite keys
o extended keys
o in memory-datenbanken
o memory-mapped access
o optionales file locking mit flock vor insert/erase/find/check/dump
o erzeugt .dll/.so
o compiliert unter linux, windows, darwin, 32bit und 64bit, unter windows
    mit mingw, icc, msvc, borland, watcom
o legal issues
o dokumentation: tutorial, interface, FAQ
o webseite
o stress-test-tool(s), das ALLE optionen durchprobiert
o admin-tool(s) fuer dump, stats, reorg
    o db_dump: 
        o key/daten dumpen machen wir erst später, wenn's iteratoren gibt
        o header dumpen

-----------------------------------------------------

o backend
    o darauf hinarbeiten dass später mal mehrere backends in einer datei
        sind, nicht nur eines

o blob
    o neu: header in jeder page mit blobid
    o header auch im verify prüfen

o debug
    o im debug-modus output wie gehabt; bei non-debug: statt file- und line
        nur "hamsterdb: " ausgeben

o filter
    generische filter, sowie 2 implementationen davon: ein encryption-codec 
    und ein zlib-codec
    arbeiten sie page- oder blob-basiert? evtl waere page-basiert besser, 
    denn dann koennten auch index-pages (bzw NUR index-pages) gefiltert 
    werden.
    (my_result_t) (*filter)(my_key_t *key, my_data_t *data, int direction);

o hash-tabelle
    @@@

o bindings 
    c++-wrapper (ähnlich stl? müsste möglich sein, aber
    schwer), python-db-modul, perl, java (alle swig?)

o asset-tool
    GUI und library für computerspiele

-----------------------------------------------------

-------------- -------------- -------------- --------------

Version 0.2.0

o duplicate keys
o iteratoren
o bindings: C++, Python, Perl, PHP
o filter: encryption
o filter: compression

-----------------------------------------------------

Version 0.3.0

o hash-tabelle
o live reorganisation???
o database-environment (ein file fuer mehrere datenbanken, gesharter cache
    etc)

-------------------------- literature -----------------------
pB+ Trees prefetching B+ Trees 
[CGM01] Improving Index Performance through Prefetching. S. Chen, P.B. 
Gibbons, and T.C. Mowry. ACM International Conference on Management
of Data (SIGMOD), Santa Barbara, California, May 2001
[GL01] B-Tree Indexes and CPU Caches. G Graefe and P. Larson. International
Conference on Data Engineering (ICDE), Heidelberg, Germany, April 2001.
[RR00] Making B+ Trees Cache Conscious in Main Memory. J. Rao 
and K.A. Ross. ACM International Conference on Management of Data (SIGMOD),
Dallas, Texas, May 2000.

