 
I Am Legend:

Items are sorted by priority (highest on top).
o a pending  TODO item (for the current release)
. a pending  TODO item (for future releases)
x a finished TODO item

-----------------------------------------------------------------------------
This Branch Is About Integrating The hamsterdb2 Functionality!!!!!
-----------------------------------------------------------------------------
The big headline is:
As a user i want to run many Transactions in parallel with high performance.
I'm not interested in multiple threads (yet), although i may use several 
threads (but then i'll use synchronization in my own code).
==============================================================================

x the env is declared as a struct, but implemented as a class. This is no
    big deal for g++, but the msvc compiler doesn't like it

x move forum to google groups; 3 mailing lists: dev, users, announcements

o improve journalling and get rid of the physical log as much as possible
    --> most of the functionality can be handled in the changeset
    --> be careful - even if the btree operations are atomic, the whole
      insert/erase is not because it also affects the blob area and the
      freelist (and maybe the header page, if the root page address is
      modified)
    --> when inserting a blob (ham_insert) we NEVER have to log the blob pages.
      if blob_alloc fails then just return the error
      (NEVER is not correct - we have to if it's overwriting an existing
      blob over multiple pages, if the blob spans multiple pages or 
      if the blob is an extended key)
    --> when adding pages to the changeset then already sort them into
        "buckets" (for index pages, blobs, freelist etc).
    --> the following operations do not have to be logged:
        1. blob operations (unless the freelist operations span multiple pages)
        2. freelist operations (unless they span multiple pages)
        3. index operations (unless they span multiple pages)
      x flush: first remove all non-dirty pages
      x sort all pages into "buckets" for blob operations, freelist, index
            and "others"
      x if there's a single index page (and no "others") then it's idempotent
      x if idempotent: first flush blobs, then freelists, then the index page
      x blobs and freelists do NEVER have to be flushed
      x however: flush EVERYTHING if others.size() > 0
      x check for regressions and fix unittests

      o create an object "ErrorInducer" which hooks into the log and is
        controlled from the unittests
        class ErrorInducer {
            add_action(int action, int loops, int error = HAM_INTERNAL_ERROR);
            std::pair<int, int> errors[MAX_ERRORS];
        };
        changeset->set_inducer(ErrorInducer *inducer);
        #define induce(action)                                                 \
            if (m_inducer && ++m_inducer[action].count>m_inducer[action].loops)\
                return (m_inducer[action].error)
      o make sure that the recovery of the journal works together with the
            new log
      o insert-tests w/ page splits, with and without duplicates, with 
            and without extended keys, with and without overwrites
        -> or: extend monster test??
      o run tests w/o transactions but w/ recovery

    o also for ham_erase
        -> it's possible that freelist entries are freed twice - don't
            assert in such a case!
        - actually we could just writev the blobs and bypass the cache
        - what about the freelist??

o API changes for 2.0.0
    o only include deprecated functions if -DHAM_USE_DEPRECATED
    o ham_txn_begin receives Environment handle, not Database handle
        o need a new parameter (reserved) for parent txn
        o need a new parameter for txn name (string)
            o this needs a getter function
        o update unittests/add new tests
        o rewrite auto-abort/auto-commit -> move to env
        o what happens if a database is closed, but it's modified by a txn
            that is still active? -> error (verify this!)
    o need to increase libtool version!
    o update C++ API
    o update Samples
    o ham_delete should always return 0 - document this (or change interface)
    o what else?

o c++ API
    o make sure everything is updated
    o clean up usage of ham_parameter_t - overload functions for bool, u64 
        and strings
        (i want the high-level APIs to use the c++ API and not the C one)

o webpage
    o link cloud: remove "forum"
    o show samples of both branches (really? they did not change!)
    o show documentation of both branches
    o store: have a big fat red "buy now" button
    o download page: document the differences between the two versions and
        which one to choose
    o /index/forum should forward to /index/support
    o make a backup of the old forum

o document how to optimize for performance
    o with transactions: try not to use duplicates
    o use overwrite as often as possible

o document migration path for the API

o update the tutorial

x java API
    x update sources
    x merge into main repository
        x add to configure
        x improve build process; do not require any "make install" to start
            the build and/or the tests
        x add java readme, changelog, TODO
    x make sure that "make dist" includes the java stuff
    x integrate win32 (and automatically update the version)

x move wince stuff to contrib directory
    x try to update the visual studio files

o android port (needs new java api) in /contrib directory

o iOS port - try to include in main branch

o .NET API
    o include in main repository
    o add to version update
    x include a.todorov's fix (forum)

. some functions need a new namespace
    o db_free_page -> env?
    o db_flush_page
    o db_flush_all
    o db_write_page_and_delete

. new test case for cursors
    insert (1, a)
    insert (1, b) (duplicate of 1)
    move (last) (-> 1, b)
    insert (1, c)
    move (last) (-> 1, c)? is the dupecache updated correctly?

. c++-ify the page

. c++-ify the device

. python API
    o update and rewrite to use the C++ API (can we use boost::python??)

. look for someone who can write a PHP or Perl or Ruby wrapper

. implement support for partial keys?

. ./test --use-transactions=10 ../../testfiles/4/blb-002.tst
    fails with an assert if disk is full; need to make sure that recovery 
    works fine in such cases, i.e. with an ErrorInducer

    os_posix.cc[221]: pwrite() failed with status 28 (No space left on device)
    env.cc[1606]: failed to flush op: -18
    ASSERT FAILED in file env.cc, line 1519:
        "txn_op_get_flags(op)!=TXN_OP_FLUSHED"
    db[0]: txn_begin failed w/ status -18

. more requirements for recovery and transactions
    . recovery: recreate all pending transactions (if requested)
    . api function to get a list of pending transactions after recovery

. test with tcmalloc; if it works then also use it in the master branch, but
    make sure that memory consumption does not increase significantly

. there are a couple of areas where a btree cursor is uncoupled, just to 
    retrieve the key and to couple the txn-key. that's not efficient
        db.c:__btree_cursor_points_to
        db.c:__compare_cursors
        txn_cursor.c:cursor_sync
        txn_cursor.c:cursor_overwrite
    o move to a separate function
    o try to optimize

. improve the changeset
    o clear must be O(1)
    o store in std::vector
    o store page->changeset_id: lsn when changeset is created

. hash-table.h: the foreach/remove_if/visitor pattern is clumsy. use 
    functor or class w/ operator() instead
. changeset: use a generic hash table for fast lookup (but leave list in place
    for everything else)
. cache: use a generic hash table

. add tests to verify that the cursor is not modified if an operation fails!
    (in cursor.cpp:LongTxnCursorTest are some wrapper functions to move or
    insert the cursor; that's a good starting point)

. the whole c++ protocol should be c++-ified

. move the whole configuration (key sizes, parameters, page size, etc) into a 
    separate class which is instantiated by the env

. c++-ify the btree node representation; 
    o include duplicates as well! disentangle duplicates from blob-handling

. c++-ify the blob handling and split off the duplicates

. c++-ify the environment
    . the Databases don't need to be in a linked list; they can be managed
        in an stl-list or std::map<dbname, db>

. cleanup db.h/db.cc - move functions into Database or 
    DatabaseImplementationLocal namespace - but take care b/c these functions
    are also used by Cursor or other modules which don't necessarily have
    access to the Local stuff
    o db_get_key_count
    o db_alloc_page
    o db_fetch_page
    o db_insert_txn
    o db_erase_txn
    o db_find_txn
    o db_check_insert_conflicts
    o db_check_erase_conflicts
    o __increment_dupe_index

. c++-ify the transaction

. c++-ify everything else

. device, page and os shold no longer return errors but throw exceptions

XXXXXXXXXXXXXXXXXXXXX release 2.0.0 STABLE !!! XXXXXXXXXXXXXXXXXXXXXXXXXXXXX

o need a function to get the txn of a conflict (same as in v2)
    ham_status_t ham_txn_get_conflicting_txn(ham_txn_t *txn, ham_txn_t **other);
    o also add to c++ API
    o add documentation (header file)
    o add documentation (wiki)

o recovery: re-create pending transactions (if required)
    o needs a function to enumerate them

. new flag for transactions: HAM_TXN_WILL_COMMIT
    if this flag is set, then write all records directly to the blob, not
    to the log. the log will only contain the rid.
    o document this (and also the drawback - that an abort will lose the 
        blobs and they cannot be reused
    -> this affects all temporary ham_insert-transactions 
    (not sure if this should get high priority)

o test with lessfs (and add lessfs to the monster testsuite)
    o test with reboots - like those that made problems with lessfs

o hamsterdb.com
    x add twitter feed
    o API documentation: don't link to "modules" but to startup page, update
        with newest version
    o crupp.de: do a backup of the database
    . google +1 button
    . can we use something like Aller.font?

o update documentation
    x in header file
    o in the wiki
        o don't forget to list all functions that are currently disabled
            w/ txn's -> sorting dupes, approx. matching, ...
        o transactional behavior/conflicts of duplicate keys
    o in the wiki: start with internal documentation
        o transactions
        o architecture
        o btree
        o journal/log
        o cache
        o I/O
        o unittests
        o cursor(s)
        o monstertests - how to use them?

o fully (!) automize the whole release process for unix; the result (on
    success) are the following files:
    o tar-ball
    o the README
    o the documentation as a tar
    o the Changelog
    o the release notes (a template)
    o the output (xml) of the monster tests

. port to WinCE

o how can we extend the monster-tests to have reliable tests for transactions?

. if memory consumption in the txn-tree is too high: flush records to disk
    (not sure if this should get high priority)

o when recovering, give users the choice if active transactions should be
    aborted (default behavior) or re-created

o extkeys: don't use txn_id for the 'age', use lsn instead

. allow use of transactions without a log/journal

. allow use of transactions for in-memory databases

XXXXXXXXXXXXXXXXXXXXX release 2.0.0 rc4 UNSTABLE XXXXXXXXXXXXXXXXXXXXXXXXXXX

o ham_get_count: could be atomically updated with every journal entry

o when flushing a changeset: sort by offset, use writev()

o add concurrency (on a high level)

o flush transactions in background

. have a flag to disable flushing of logfiles/journal files (or flush them 
    async.)

o continue as described in integrate-ham2.txt...

