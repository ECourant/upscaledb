
hamsterdb 0.4.8                                Sun Nov 11 09:42:07 UTC 2007
(C) Christoph Rupp, chris@crupp.de; http://www.hamsterdb.com

This is the README file of hamsterdb.

Contents:

1. About

hamsterdb is a database engine written in ANSI C. It supports a B+Tree index
structure, uses memory mapped I/O (if available), supports cursors and
variable length keys and can create in-memory databases.

Although no bugs are known, this release is marked "unstable", because the
database file format is still subject to change. The first stable release 
will be version 1.0.

The database format of 0.4.8 is not compatible to 0.4.7.

See below for known issues.

2. Changes

New Features
* Environments now support a configurable number of databases; the default
    is 16, but files with a pagesize of 16kb can have up to 508 databases.
    See parameter HAM_PARAM_MAX_ENV_DATABASES for ham_env_create_ex.
* Added a new function ham_env_get_database_names(), which returns all 
	database names in an environment.
* Implemented zlib-based compression; a new function was added:
    ham_enable_compression() (can be disabled by specifying
    --disable-compression as a ./configure option)
* Implemented AES encryption; a new function was added: 
	ham_env_enable_encryption() (can be disabled by specifying
    --disable-encryption as a ./configure option)
* Added a C++ API file (include/ham/hamsterdb.hpp) and two samples:
    samples/db6.cpp and samples/env3.cpp.

Bugfixes
* Fixed bug in configure.in; on some systems, the call to getpagesize()
    was not declared correctly.
* When moving a cursor through duplicates and the cache was
    exhausted, an assert was triggered.
* ham_close in an environment could lead to a segmentation fault, 
    because the cache for extended keys was not properly set up, before
    it was deleted.
o (Win32) The parameters for memory mapped I/O did not create 
    private copies and therefore the file could be damaged if an operation
    aborted

Other Changes
* The default pagesize for unix databases is now 16kb, not 4kb; benchmarks 
    show that this is the fastest option, but still results in small files.

To see a list of all changes, look in the file CHANGELOG.

3. Roadmap

- more stabilization and moving towards version 1.0
- command line tools for recovery, dump and statistics

4. Features

- Very fast sorted B+Tree with variable length keys
- Can run as an in-memory database
- Supports multiple databases in one file
- Supports record number databases ("auto-increment")
- Supports duplicate keys
- Very fast database cursors 
- Configurable page size, cache size and index key size
- Portable ANSI-C implementation
- Runs on Linux, Unices, Microsoft Windows, Windows CE
- Uses memory mapped I/O for fast disk access (but falls back to read/write if
  mmap is not available)
- Uses 64bit file pointers and supports huge files (>2 GB)
- Endian-independent file format
- Easy to use and well-documented
- Supports rudimentary live-reorganization by automatically
    merging freelist entries
- Open source and released under the GPL 2.0 or later
- Supports AES encryption and zlib compression
- C++ wrapper

5. Known Issues/Bugs

The Debug build for Windows 64 fails in the routines for memory mapped I/O.
As a workaround, don't use the Debug build for x64. The Release build works
without problems.

6. Compiling 

6.1 Linux and Cygwin/Win32

To compile hamsterdb, run ./configure, make, make install.

Run `./configure --help' for more options (i.e. static/dynamic library, 
build with debugging symbols etc).

6.2 Microsoft Visual Studio 8

A Solution file is provided for Microsoft Visual C++ 2005:
win32/hamsterdb.sln. It compiles a static and a dynamic library. 
Please read the README.TXT file in the win32 directory.
All libraries can be downloaded separately from the hamsterdb webpage.

To download Microsoft Visual C++ 2005 Express Edition for free, go to
http://msdn.microsoft.com/vstudio/express/visualc/default.aspx.

7. Testing and Example Code

Make automatically compiles several example program in the directory
'/samples'. To see hamsterdb in action, just run '/samples/db1' or any
other sample. (or '/win32/out/samples/db1*.exe' on Windows platforms).

8. API Documentation

API documentation is not yet available. The header files in '/include/ham' are 
commented, though. The next release will provide a doxygen script to 
generate the documentation from the header files.  

9. Other Ways to Compile hamsterdb

If you want to compile hamsterdb without using the provided ./configure
environment, you have to set some preprocessor macros:

WIN32                   Build for Win32 platform
DEBUG                   enable debugging output and diagnostic checks (slow!)
HAM_LITTLE_ENDIAN       compile for little endian machines (i.e. x86)
HAM_BIG_ENDIAN          compile for big endian machines (most other
                            architectures)
HAM_32BIT               compile for 32bit
HAM_64BIT               compile for 64bit
HAM_ENABLE_INTERNAL     enable internal functions (declared in
                            include/ham/hamsterdb_int.h)
HAM_DISABLE_COMPRESSION build without support for zlib compression
HAM_DISABLE_ENCRYPTION  build without support for AES encryption

Also, if you compile for windows, you have to compile the file src/os_win32.c,
and ignore the file src/os_posix.c. Vice versa on non-Windows platforms.

10. Porting hamsterdb

Porting hamsterdb shouldn't be too difficult. All operating system dependend
functions are declared in 'src/os.h' and defined in 'src/os_win32.c' or 
'src/os_posix.c'. 
Other compiler- and OS-specific macros are in 'include/ham/types.h'. 
Most likely, these are the only files which have to be touched. Also see item 
9) for important macros. 

11. Other Copyrights

The AES library in '3rdparty/aes' is (C) Karl Malbrain, malbrain@yahoo.com
(http://www.geocities.com/malbrain). It has the following license:

    This work, including the source code, documentation
    and related data, is placed into the public domain.

    The orginal author is Karl Malbrain.

    THIS SOFTWARE IS PROVIDED AS-IS WITHOUT WARRANTY
    OF ANY KIND, NOT EVEN THE IMPLIED WARRANTY OF
    MERCHANTABILITY. THE AUTHOR OF THIS SOFTWARE,
    ASSUMES _NO_ RESPONSIBILITY FOR ANY CONSEQUENCE
    RESULTING FROM THE USE, MODIFICATION, OR
    REDISTRIBUTION OF THIS SOFTWARE.

The zlib library in '3rdparty/zlib' is (C) Jean-loup Gailly and Mark Adler. 
It has the following license:

    This software is provided 'as-is', without any express or implied
    warranty.  In no event will the authors be held liable for any damages
    arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose,
    including commercial applications, and to alter it and redistribute it
    freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
       claim that you wrote the original software. If you use this software
       in a product, an acknowledgment in the product documentation would be
       appreciated but is not required.
    2. Altered source versions must be plainly marked as such, and must not be
       misrepresented as being the original software.
    3. This notice may not be removed or altered from any source distribution.

    Jean-loup Gailly        Mark Adler
    jloup@gzip.org          madler@alumni.caltech.edu

