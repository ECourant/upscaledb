
hamsterdb 0.4.7                                Wed Oct 10 08:11:01 UTC 2007
(C) Christoph Rupp, chris@crupp.de; http://www.hamsterdb.com

This is the README file of hamsterdb.

Contents:

1. About

hamsterdb is a database engine written in ANSI C. It supports a B+Tree index
structure, uses memory mapped I/O (if available), supports cursors and
variable length keys and can create in-memory databases.

Although no bugs are known, this release is marked "unstable", because the
database file format is still subject to change. The first stable release 
will be version 1.0.

2. Changes

New Features
* ham_close and ham_env_close now expect a second parameter (flags). By
    specifying the flag HAM_AUTO_CLEANUP, all open cursors (or open 
    databases, respectively) are automatically closed. Read the samples
    to see the flag in action.
* Added the function ham_cursor_get_duplicate_count(), which returns the
    number of duplicates of a key.

Bugfixes
* Fixed a bug in the freelist management, which could result in a loss of
    the freelist information and exploding file size.
* Record numbers are no longer reused if the highest recno was deleted
    and the database was then reopened.
* Fixed a bug in the cursor management, where a cursor could lose the
    duplicate ID.

Other Changes
* Added a new sample env2.c, which demonstrates a 1:n relationship for
    two tables (with the use of duplicate keys).
* It's now enough to initialize a ham_key_t and ham_record_t once in the
    beginning, and not before every use. Also added some checks and 
    errors when using uninitialized ham_key_t or ham_record_t structures.
* Strong performance improvements for duplicate keys.

To see a list of all changes, look in the file CHANGELOG.

3. Roadmap

- more stabilization and moving towards version 1.0
- command line tools for recovery, dump and statistics
- a C++ wrapper class

4. Features

- Very fast sorted B+Tree with variable length keys
- Can run as an in-memory database
- Supports multiple databases in one file
- Supports record number databases ("auto-increment")
- Supports duplicate keys
- Very fast database cursors 
- Configurable page size, cache size and index key size
- Portable ANSI-C implementation
- Runs on Linux, Unices, Microsoft Windows, Windows CE
- Uses memory mapped I/O for fast disk access (but falls back to read/write if
  mmap is not available)
- Uses 64bit file pointers and supports huge files (>2 GB)
- Endian-independent file format
- Easy to use and well-documented
- Supports rudimentary live-reorganization by automatically
    merging freelist entries
- Open source and released under the GPL 2.0 or later

5. Known Issues/Bugs

No known issues.

6. Compiling 

6.1 Linux and Cygwin/Win32

To compile hamsterdb, run ./configure, make, make install.

Run `./configure --help' for more options (i.e. static/dynamic library, 
build with debugging symbols etc).

6.2 Microsoft Visual Studio 8

A Solution file is provided for Microsoft Visual C++ 2005:
win32/hamsterdb.sln. It compiles a static and a dynamic library. 
Please read the README.TXT file in the win32 directory.
All libraries can be downloaded separately from the hamsterdb webpage.

To download Microsoft Visual C++ 2005 Express Edition for free, go to
http://msdn.microsoft.com/vstudio/express/visualc/default.aspx.

7. Testing and Example Code

Make automatically compiles several example program in the directory
'/samples'. To see hamsterdb in action, just run '/samples/db1' or any
other sample. (or '/win32/out/samples/db1*.exe' on Windows platforms).

8. API Documentation

API documentation is not yet available. The header files in '/include/ham' are 
commented, though. The next release will provide a doxygen script to 
generate the documentation from the header files.  

9. Other Ways to Compile hamsterdb

If you want to compile hamsterdb without using the provided ./configure
environment, you have to set some preprocessor macros:

WIN32                   Build for Win32 platform
DEBUG                   enable debugging output and diagnostic checks (slow!)
HAM_LITTLE_ENDIAN       compile for little endian machines (i.e. x86)
HAM_BIG_ENDIAN          compile for big endian machines (most other
                            architectures)
HAM_32BIT               compile for 32bit
HAM_64BIT               compile for 64bit
HAM_ENABLE_INTERNAL     enable internal functions (declared in
                            include/ham/hamsterdb_int.h)

Also, if you compile for windows, you have to compile the file src/os_win32.c,
and ignore the file src/os_posix.c. Vice versa on non-Windows platforms.

10. Porting hamsterdb

Porting hamsterdb shouldn't be too difficult. All operating system dependend
functions are declared in 'src/os.h' and defined in 'src/os_win32.c' or 
'src/os_posix.c'. 
Other compiler- and OS-specific macros are in 'include/ham/types.h'. 
Most likely, these are the only files which have to be touched. Also see item 
9) for important macros. 

