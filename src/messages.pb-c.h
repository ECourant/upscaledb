/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_messages_2eproto__INCLUDED
#define PROTOBUF_C_messages_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Ham__Wrapper Ham__Wrapper;
typedef struct _Ham__ConnectRequest Ham__ConnectRequest;
typedef struct _Ham__ConnectReply Ham__ConnectReply;
typedef struct _Ham__EnvGetParametersRequest Ham__EnvGetParametersRequest;
typedef struct _Ham__EnvGetParametersReply Ham__EnvGetParametersReply;
typedef struct _Ham__EnvGetDatabaseNamesRequest Ham__EnvGetDatabaseNamesRequest;
typedef struct _Ham__EnvGetDatabaseNamesReply Ham__EnvGetDatabaseNamesReply;
typedef struct _Ham__EnvRenameRequest Ham__EnvRenameRequest;
typedef struct _Ham__EnvRenameReply Ham__EnvRenameReply;
typedef struct _Ham__EnvFlushRequest Ham__EnvFlushRequest;
typedef struct _Ham__EnvFlushReply Ham__EnvFlushReply;
typedef struct _Ham__EnvCreateDbRequest Ham__EnvCreateDbRequest;
typedef struct _Ham__EnvCreateDbReply Ham__EnvCreateDbReply;
typedef struct _Ham__EnvOpenDbRequest Ham__EnvOpenDbRequest;
typedef struct _Ham__EnvOpenDbReply Ham__EnvOpenDbReply;
typedef struct _Ham__EnvEraseDbRequest Ham__EnvEraseDbRequest;
typedef struct _Ham__EnvEraseDbReply Ham__EnvEraseDbReply;
typedef struct _Ham__DbCloseRequest Ham__DbCloseRequest;
typedef struct _Ham__DbCloseReply Ham__DbCloseReply;
typedef struct _Ham__DbGetParametersRequest Ham__DbGetParametersRequest;
typedef struct _Ham__DbGetParametersReply Ham__DbGetParametersReply;
typedef struct _Ham__DbFlushRequest Ham__DbFlushRequest;
typedef struct _Ham__DbFlushReply Ham__DbFlushReply;
typedef struct _Ham__TxnBeginRequest Ham__TxnBeginRequest;
typedef struct _Ham__TxnBeginReply Ham__TxnBeginReply;
typedef struct _Ham__TxnCommitRequest Ham__TxnCommitRequest;
typedef struct _Ham__TxnCommitReply Ham__TxnCommitReply;
typedef struct _Ham__TxnAbortRequest Ham__TxnAbortRequest;
typedef struct _Ham__TxnAbortReply Ham__TxnAbortReply;
typedef struct _Ham__DbCheckIntegrityRequest Ham__DbCheckIntegrityRequest;
typedef struct _Ham__DbCheckIntegrityReply Ham__DbCheckIntegrityReply;
typedef struct _Ham__DbGetKeyCountRequest Ham__DbGetKeyCountRequest;
typedef struct _Ham__DbGetKeyCountReply Ham__DbGetKeyCountReply;
typedef struct _Ham__Key Ham__Key;
typedef struct _Ham__Record Ham__Record;
typedef struct _Ham__DbInsertRequest Ham__DbInsertRequest;
typedef struct _Ham__DbInsertReply Ham__DbInsertReply;
typedef struct _Ham__DbEraseRequest Ham__DbEraseRequest;
typedef struct _Ham__DbEraseReply Ham__DbEraseReply;
typedef struct _Ham__DbFindRequest Ham__DbFindRequest;
typedef struct _Ham__DbFindReply Ham__DbFindReply;
typedef struct _Ham__CursorCreateRequest Ham__CursorCreateRequest;
typedef struct _Ham__CursorCreateReply Ham__CursorCreateReply;
typedef struct _Ham__CursorCloneRequest Ham__CursorCloneRequest;
typedef struct _Ham__CursorCloneReply Ham__CursorCloneReply;
typedef struct _Ham__CursorCloseRequest Ham__CursorCloseRequest;
typedef struct _Ham__CursorCloseReply Ham__CursorCloseReply;
typedef struct _Ham__CursorInsertRequest Ham__CursorInsertRequest;
typedef struct _Ham__CursorInsertReply Ham__CursorInsertReply;
typedef struct _Ham__CursorEraseRequest Ham__CursorEraseRequest;
typedef struct _Ham__CursorEraseReply Ham__CursorEraseReply;
typedef struct _Ham__CursorFindRequest Ham__CursorFindRequest;
typedef struct _Ham__CursorFindReply Ham__CursorFindReply;
typedef struct _Ham__CursorGetDuplicateCountRequest Ham__CursorGetDuplicateCountRequest;
typedef struct _Ham__CursorGetDuplicateCountReply Ham__CursorGetDuplicateCountReply;
typedef struct _Ham__CursorOverwriteRequest Ham__CursorOverwriteRequest;
typedef struct _Ham__CursorOverwriteReply Ham__CursorOverwriteReply;
typedef struct _Ham__CursorMoveRequest Ham__CursorMoveRequest;
typedef struct _Ham__CursorMoveReply Ham__CursorMoveReply;


/* --- enums --- */

typedef enum _Ham__Wrapper__Type {
  HAM__WRAPPER__TYPE__CONNECT_REQUEST = 10,
  HAM__WRAPPER__TYPE__CONNECT_REPLY = 11,
  HAM__WRAPPER__TYPE__ENV_RENAME_REQUEST = 20,
  HAM__WRAPPER__TYPE__ENV_RENAME_REPLY = 21,
  HAM__WRAPPER__TYPE__ENV_GET_PARAMETERS_REQUEST = 30,
  HAM__WRAPPER__TYPE__ENV_GET_PARAMETERS_REPLY = 31,
  HAM__WRAPPER__TYPE__ENV_GET_DATABASE_NAMES_REQUEST = 40,
  HAM__WRAPPER__TYPE__ENV_GET_DATABASE_NAMES_REPLY = 41,
  HAM__WRAPPER__TYPE__ENV_FLUSH_REQUEST = 50,
  HAM__WRAPPER__TYPE__ENV_FLUSH_REPLY = 51,
  HAM__WRAPPER__TYPE__ENV_CREATE_DB_REQUEST = 60,
  HAM__WRAPPER__TYPE__ENV_CREATE_DB_REPLY = 61,
  HAM__WRAPPER__TYPE__ENV_OPEN_DB_REQUEST = 70,
  HAM__WRAPPER__TYPE__ENV_OPEN_DB_REPLY = 71,
  HAM__WRAPPER__TYPE__ENV_ERASE_DB_REQUEST = 80,
  HAM__WRAPPER__TYPE__ENV_ERASE_DB_REPLY = 81,
  HAM__WRAPPER__TYPE__DB_CLOSE_REQUEST = 90,
  HAM__WRAPPER__TYPE__DB_CLOSE_REPLY = 91,
  HAM__WRAPPER__TYPE__DB_GET_PARAMETERS_REQUEST = 100,
  HAM__WRAPPER__TYPE__DB_GET_PARAMETERS_REPLY = 101,
  HAM__WRAPPER__TYPE__DB_FLUSH_REQUEST = 110,
  HAM__WRAPPER__TYPE__DB_FLUSH_REPLY = 111,
  HAM__WRAPPER__TYPE__TXN_BEGIN_REQUEST = 120,
  HAM__WRAPPER__TYPE__TXN_BEGIN_REPLY = 121,
  HAM__WRAPPER__TYPE__TXN_COMMIT_REQUEST = 130,
  HAM__WRAPPER__TYPE__TXN_COMMIT_REPLY = 131,
  HAM__WRAPPER__TYPE__TXN_ABORT_REQUEST = 140,
  HAM__WRAPPER__TYPE__TXN_ABORT_REPLY = 141,
  HAM__WRAPPER__TYPE__DB_CHECK_INTEGRITY_REQUEST = 150,
  HAM__WRAPPER__TYPE__DB_CHECK_INTEGRITY_REPLY = 151,
  HAM__WRAPPER__TYPE__DB_GET_KEY_COUNT_REQUEST = 160,
  HAM__WRAPPER__TYPE__DB_GET_KEY_COUNT_REPLY = 161,
  HAM__WRAPPER__TYPE__DB_INSERT_REQUEST = 170,
  HAM__WRAPPER__TYPE__DB_INSERT_REPLY = 171,
  HAM__WRAPPER__TYPE__DB_ERASE_REQUEST = 180,
  HAM__WRAPPER__TYPE__DB_ERASE_REPLY = 181,
  HAM__WRAPPER__TYPE__DB_FIND_REQUEST = 190,
  HAM__WRAPPER__TYPE__DB_FIND_REPLY = 191,
  HAM__WRAPPER__TYPE__CURSOR_CREATE_REQUEST = 200,
  HAM__WRAPPER__TYPE__CURSOR_CREATE_REPLY = 201,
  HAM__WRAPPER__TYPE__CURSOR_CLONE_REQUEST = 210,
  HAM__WRAPPER__TYPE__CURSOR_CLONE_REPLY = 211,
  HAM__WRAPPER__TYPE__CURSOR_CLOSE_REQUEST = 220,
  HAM__WRAPPER__TYPE__CURSOR_CLOSE_REPLY = 221,
  HAM__WRAPPER__TYPE__CURSOR_INSERT_REQUEST = 230,
  HAM__WRAPPER__TYPE__CURSOR_INSERT_REPLY = 231,
  HAM__WRAPPER__TYPE__CURSOR_ERASE_REQUEST = 240,
  HAM__WRAPPER__TYPE__CURSOR_ERASE_REPLY = 241,
  HAM__WRAPPER__TYPE__CURSOR_FIND_REQUEST = 250,
  HAM__WRAPPER__TYPE__CURSOR_FIND_REPLY = 251,
  HAM__WRAPPER__TYPE__CURSOR_GET_DUPLICATE_COUNT_REQUEST = 260,
  HAM__WRAPPER__TYPE__CURSOR_GET_DUPLICATE_COUNT_REPLY = 261,
  HAM__WRAPPER__TYPE__CURSOR_OVERWRITE_REQUEST = 270,
  HAM__WRAPPER__TYPE__CURSOR_OVERWRITE_REPLY = 271,
  HAM__WRAPPER__TYPE__CURSOR_MOVE_REQUEST = 280,
  HAM__WRAPPER__TYPE__CURSOR_MOVE_REPLY = 281
} Ham__Wrapper__Type;

/* --- messages --- */

struct  _Ham__Wrapper
{
  ProtobufCMessage base;
  Ham__Wrapper__Type type;
  Ham__ConnectRequest *connect_request;
  Ham__ConnectReply *connect_reply;
  Ham__EnvRenameRequest *env_rename_request;
  Ham__EnvRenameReply *env_rename_reply;
  Ham__EnvGetParametersRequest *env_get_parameters_request;
  Ham__EnvGetParametersReply *env_get_parameters_reply;
  Ham__EnvGetDatabaseNamesRequest *env_get_database_names_request;
  Ham__EnvGetDatabaseNamesReply *env_get_database_names_reply;
  Ham__EnvFlushRequest *env_flush_request;
  Ham__EnvFlushReply *env_flush_reply;
  Ham__EnvCreateDbRequest *env_create_db_request;
  Ham__EnvCreateDbReply *env_create_db_reply;
  Ham__EnvOpenDbRequest *env_open_db_request;
  Ham__EnvOpenDbReply *env_open_db_reply;
  Ham__EnvEraseDbRequest *env_erase_db_request;
  Ham__EnvEraseDbReply *env_erase_db_reply;
  Ham__DbCloseRequest *db_close_request;
  Ham__DbCloseReply *db_close_reply;
  Ham__DbGetParametersRequest *db_get_parameters_request;
  Ham__DbGetParametersReply *db_get_parameters_reply;
  Ham__DbFlushRequest *db_flush_request;
  Ham__DbFlushReply *db_flush_reply;
  Ham__TxnBeginRequest *txn_begin_request;
  Ham__TxnBeginReply *txn_begin_reply;
  Ham__TxnCommitRequest *txn_commit_request;
  Ham__TxnCommitReply *txn_commit_reply;
  Ham__TxnAbortRequest *txn_abort_request;
  Ham__TxnAbortReply *txn_abort_reply;
  Ham__DbCheckIntegrityRequest *db_check_integrity_request;
  Ham__DbCheckIntegrityReply *db_check_integrity_reply;
  Ham__DbGetKeyCountRequest *db_get_key_count_request;
  Ham__DbGetKeyCountReply *db_get_key_count_reply;
  Ham__DbInsertRequest *db_insert_request;
  Ham__DbInsertReply *db_insert_reply;
  Ham__DbEraseRequest *db_erase_request;
  Ham__DbEraseReply *db_erase_reply;
  Ham__DbFindRequest *db_find_request;
  Ham__DbFindReply *db_find_reply;
  Ham__CursorCreateRequest *cursor_create_request;
  Ham__CursorCreateReply *cursor_create_reply;
  Ham__CursorCloneRequest *cursor_clone_request;
  Ham__CursorCloneReply *cursor_clone_reply;
  Ham__CursorCloseRequest *cursor_close_request;
  Ham__CursorCloseReply *cursor_close_reply;
  Ham__CursorInsertRequest *cursor_insert_request;
  Ham__CursorInsertReply *cursor_insert_reply;
  Ham__CursorEraseRequest *cursor_erase_request;
  Ham__CursorEraseReply *cursor_erase_reply;
  Ham__CursorFindRequest *cursor_find_request;
  Ham__CursorFindReply *cursor_find_reply;
  Ham__CursorGetDuplicateCountRequest *cursor_get_duplicate_count_request;
  Ham__CursorGetDuplicateCountReply *cursor_get_duplicate_count_reply;
  Ham__CursorOverwriteRequest *cursor_overwrite_request;
  Ham__CursorOverwriteReply *cursor_overwrite_reply;
  Ham__CursorMoveRequest *cursor_move_request;
  Ham__CursorMoveReply *cursor_move_reply;
};
#define HAM__WRAPPER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__wrapper__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Ham__ConnectRequest
{
  ProtobufCMessage base;
  char *path;
};
#define HAM__CONNECT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__connect_request__descriptor) \
    , NULL }


struct  _Ham__ConnectReply
{
  ProtobufCMessage base;
  int32_t status;
  uint32_t env_flags;
};
#define HAM__CONNECT_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__connect_reply__descriptor) \
    , 0, 0 }


struct  _Ham__EnvGetParametersRequest
{
  ProtobufCMessage base;
  size_t n_names;
  uint32_t *names;
};
#define HAM__ENV_GET_PARAMETERS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_get_parameters_request__descriptor) \
    , 0,NULL }


struct  _Ham__EnvGetParametersReply
{
  ProtobufCMessage base;
  int32_t status;
  protobuf_c_boolean has_cachesize;
  uint32_t cachesize;
  protobuf_c_boolean has_pagesize;
  uint32_t pagesize;
  protobuf_c_boolean has_max_env_databases;
  uint32_t max_env_databases;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_filemode;
  uint32_t filemode;
  char *filename;
};
#define HAM__ENV_GET_PARAMETERS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_get_parameters_reply__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _Ham__EnvGetDatabaseNamesRequest
{
  ProtobufCMessage base;
};
#define HAM__ENV_GET_DATABASE_NAMES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_get_database_names_request__descriptor) \
     }


struct  _Ham__EnvGetDatabaseNamesReply
{
  ProtobufCMessage base;
  int32_t status;
  size_t n_names;
  uint32_t *names;
};
#define HAM__ENV_GET_DATABASE_NAMES_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_get_database_names_reply__descriptor) \
    , 0, 0,NULL }


struct  _Ham__EnvRenameRequest
{
  ProtobufCMessage base;
  uint32_t oldname;
  uint32_t newname;
  uint32_t flags;
};
#define HAM__ENV_RENAME_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_rename_request__descriptor) \
    , 0, 0, 0 }


struct  _Ham__EnvRenameReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__ENV_RENAME_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_rename_reply__descriptor) \
    , 0 }


struct  _Ham__EnvFlushRequest
{
  ProtobufCMessage base;
  uint32_t flags;
};
#define HAM__ENV_FLUSH_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_flush_request__descriptor) \
    , 0 }


struct  _Ham__EnvFlushReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__ENV_FLUSH_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_flush_reply__descriptor) \
    , 0 }


struct  _Ham__EnvCreateDbRequest
{
  ProtobufCMessage base;
  uint32_t dbname;
  uint32_t flags;
  size_t n_param_names;
  uint32_t *param_names;
  size_t n_param_values;
  uint64_t *param_values;
};
#define HAM__ENV_CREATE_DB_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_create_db_request__descriptor) \
    , 0, 0, 0,NULL, 0,NULL }


struct  _Ham__EnvCreateDbReply
{
  ProtobufCMessage base;
  int32_t status;
  uint64_t db_handle;
  uint32_t db_flags;
};
#define HAM__ENV_CREATE_DB_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_create_db_reply__descriptor) \
    , 0, 0, 0 }


struct  _Ham__EnvOpenDbRequest
{
  ProtobufCMessage base;
  uint32_t dbname;
  uint32_t flags;
  size_t n_param_names;
  uint32_t *param_names;
  size_t n_param_values;
  uint64_t *param_values;
};
#define HAM__ENV_OPEN_DB_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_open_db_request__descriptor) \
    , 0, 0, 0,NULL, 0,NULL }


struct  _Ham__EnvOpenDbReply
{
  ProtobufCMessage base;
  int32_t status;
  uint64_t db_handle;
  uint32_t db_flags;
};
#define HAM__ENV_OPEN_DB_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_open_db_reply__descriptor) \
    , 0, 0, 0 }


struct  _Ham__EnvEraseDbRequest
{
  ProtobufCMessage base;
  uint32_t name;
  uint32_t flags;
};
#define HAM__ENV_ERASE_DB_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_erase_db_request__descriptor) \
    , 0, 0 }


struct  _Ham__EnvEraseDbReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__ENV_ERASE_DB_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__env_erase_db_reply__descriptor) \
    , 0 }


struct  _Ham__DbCloseRequest
{
  ProtobufCMessage base;
  uint64_t db_handle;
  uint32_t flags;
};
#define HAM__DB_CLOSE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_close_request__descriptor) \
    , 0, 0 }


struct  _Ham__DbCloseReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__DB_CLOSE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_close_reply__descriptor) \
    , 0 }


struct  _Ham__DbGetParametersRequest
{
  ProtobufCMessage base;
  uint64_t db_handle;
  size_t n_names;
  uint32_t *names;
};
#define HAM__DB_GET_PARAMETERS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_get_parameters_request__descriptor) \
    , 0, 0,NULL }


struct  _Ham__DbGetParametersReply
{
  ProtobufCMessage base;
  int32_t status;
  protobuf_c_boolean has_cachesize;
  uint32_t cachesize;
  protobuf_c_boolean has_pagesize;
  uint32_t pagesize;
  protobuf_c_boolean has_max_env_databases;
  uint32_t max_env_databases;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_filemode;
  uint32_t filemode;
  char *filename;
};
#define HAM__DB_GET_PARAMETERS_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_get_parameters_reply__descriptor) \
    , 0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


struct  _Ham__DbFlushRequest
{
  ProtobufCMessage base;
  uint64_t db_handle;
  uint32_t flags;
};
#define HAM__DB_FLUSH_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_flush_request__descriptor) \
    , 0, 0 }


struct  _Ham__DbFlushReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__DB_FLUSH_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_flush_reply__descriptor) \
    , 0 }


struct  _Ham__TxnBeginRequest
{
  ProtobufCMessage base;
  uint32_t flags;
  uint64_t db_handle;
};
#define HAM__TXN_BEGIN_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__txn_begin_request__descriptor) \
    , 0, 0 }


struct  _Ham__TxnBeginReply
{
  ProtobufCMessage base;
  int32_t status;
  uint64_t txn_handle;
};
#define HAM__TXN_BEGIN_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__txn_begin_reply__descriptor) \
    , 0, 0 }


struct  _Ham__TxnCommitRequest
{
  ProtobufCMessage base;
  uint64_t txn_handle;
  uint32_t flags;
};
#define HAM__TXN_COMMIT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__txn_commit_request__descriptor) \
    , 0, 0 }


struct  _Ham__TxnCommitReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__TXN_COMMIT_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__txn_commit_reply__descriptor) \
    , 0 }


struct  _Ham__TxnAbortRequest
{
  ProtobufCMessage base;
  uint64_t txn_handle;
  uint32_t flags;
};
#define HAM__TXN_ABORT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__txn_abort_request__descriptor) \
    , 0, 0 }


struct  _Ham__TxnAbortReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__TXN_ABORT_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__txn_abort_reply__descriptor) \
    , 0 }


struct  _Ham__DbCheckIntegrityRequest
{
  ProtobufCMessage base;
  uint64_t db_handle;
  uint64_t txn_handle;
};
#define HAM__DB_CHECK_INTEGRITY_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_check_integrity_request__descriptor) \
    , 0, 0 }


struct  _Ham__DbCheckIntegrityReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__DB_CHECK_INTEGRITY_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_check_integrity_reply__descriptor) \
    , 0 }


struct  _Ham__DbGetKeyCountRequest
{
  ProtobufCMessage base;
  uint64_t db_handle;
  uint64_t txn_handle;
  uint32_t flags;
};
#define HAM__DB_GET_KEY_COUNT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_get_key_count_request__descriptor) \
    , 0, 0, 0 }


struct  _Ham__DbGetKeyCountReply
{
  ProtobufCMessage base;
  int32_t status;
  uint64_t keycount;
};
#define HAM__DB_GET_KEY_COUNT_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_get_key_count_reply__descriptor) \
    , 0, 0 }


struct  _Ham__Key
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
  uint32_t flags;
  uint32_t intflags;
};
#define HAM__KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__key__descriptor) \
    , {0,NULL}, 0, 0 }


struct  _Ham__Record
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
  uint32_t flags;
  uint32_t partial_offset;
  uint32_t partial_size;
};
#define HAM__RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__record__descriptor) \
    , {0,NULL}, 0, 0, 0 }


struct  _Ham__DbInsertRequest
{
  ProtobufCMessage base;
  uint64_t db_handle;
  uint64_t txn_handle;
  Ham__Key *key;
  Ham__Record *record;
  uint32_t flags;
};
#define HAM__DB_INSERT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_insert_request__descriptor) \
    , 0, 0, NULL, NULL, 0 }


struct  _Ham__DbInsertReply
{
  ProtobufCMessage base;
  int32_t status;
  Ham__Key *key;
};
#define HAM__DB_INSERT_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_insert_reply__descriptor) \
    , 0, NULL }


struct  _Ham__DbEraseRequest
{
  ProtobufCMessage base;
  uint64_t db_handle;
  uint64_t txn_handle;
  Ham__Key *key;
  uint32_t flags;
};
#define HAM__DB_ERASE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_erase_request__descriptor) \
    , 0, 0, NULL, 0 }


struct  _Ham__DbEraseReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__DB_ERASE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_erase_reply__descriptor) \
    , 0 }


struct  _Ham__DbFindRequest
{
  ProtobufCMessage base;
  uint64_t db_handle;
  uint64_t txn_handle;
  Ham__Key *key;
  Ham__Record *record;
  uint32_t flags;
};
#define HAM__DB_FIND_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_find_request__descriptor) \
    , 0, 0, NULL, NULL, 0 }


struct  _Ham__DbFindReply
{
  ProtobufCMessage base;
  int32_t status;
  Ham__Record *record;
  Ham__Key *key;
};
#define HAM__DB_FIND_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__db_find_reply__descriptor) \
    , 0, NULL, NULL }


struct  _Ham__CursorCreateRequest
{
  ProtobufCMessage base;
  uint64_t db_handle;
  uint64_t txn_handle;
  uint32_t flags;
};
#define HAM__CURSOR_CREATE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_create_request__descriptor) \
    , 0, 0, 0 }


struct  _Ham__CursorCreateReply
{
  ProtobufCMessage base;
  int32_t status;
  uint64_t cursor_handle;
};
#define HAM__CURSOR_CREATE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_create_reply__descriptor) \
    , 0, 0 }


struct  _Ham__CursorCloneRequest
{
  ProtobufCMessage base;
  uint64_t cursor_handle;
};
#define HAM__CURSOR_CLONE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_clone_request__descriptor) \
    , 0 }


struct  _Ham__CursorCloneReply
{
  ProtobufCMessage base;
  int32_t status;
  uint64_t cursor_handle;
};
#define HAM__CURSOR_CLONE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_clone_reply__descriptor) \
    , 0, 0 }


struct  _Ham__CursorCloseRequest
{
  ProtobufCMessage base;
  uint64_t cursor_handle;
};
#define HAM__CURSOR_CLOSE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_close_request__descriptor) \
    , 0 }


struct  _Ham__CursorCloseReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__CURSOR_CLOSE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_close_reply__descriptor) \
    , 0 }


struct  _Ham__CursorInsertRequest
{
  ProtobufCMessage base;
  uint64_t cursor_handle;
  Ham__Key *key;
  Ham__Record *record;
  uint32_t flags;
};
#define HAM__CURSOR_INSERT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_insert_request__descriptor) \
    , 0, NULL, NULL, 0 }


struct  _Ham__CursorInsertReply
{
  ProtobufCMessage base;
  int32_t status;
  Ham__Key *key;
};
#define HAM__CURSOR_INSERT_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_insert_reply__descriptor) \
    , 0, NULL }


struct  _Ham__CursorEraseRequest
{
  ProtobufCMessage base;
  uint64_t cursor_handle;
  uint32_t flags;
};
#define HAM__CURSOR_ERASE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_erase_request__descriptor) \
    , 0, 0 }


struct  _Ham__CursorEraseReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__CURSOR_ERASE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_erase_reply__descriptor) \
    , 0 }


struct  _Ham__CursorFindRequest
{
  ProtobufCMessage base;
  uint64_t cursor_handle;
  Ham__Key *key;
  Ham__Record *record;
  uint32_t flags;
};
#define HAM__CURSOR_FIND_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_find_request__descriptor) \
    , 0, NULL, NULL, 0 }


struct  _Ham__CursorFindReply
{
  ProtobufCMessage base;
  int32_t status;
  Ham__Key *key;
  Ham__Record *record;
};
#define HAM__CURSOR_FIND_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_find_reply__descriptor) \
    , 0, NULL, NULL }


struct  _Ham__CursorGetDuplicateCountRequest
{
  ProtobufCMessage base;
  uint64_t cursor_handle;
  uint32_t flags;
};
#define HAM__CURSOR_GET_DUPLICATE_COUNT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_get_duplicate_count_request__descriptor) \
    , 0, 0 }


struct  _Ham__CursorGetDuplicateCountReply
{
  ProtobufCMessage base;
  int32_t status;
  uint32_t count;
};
#define HAM__CURSOR_GET_DUPLICATE_COUNT_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_get_duplicate_count_reply__descriptor) \
    , 0, 0 }


struct  _Ham__CursorOverwriteRequest
{
  ProtobufCMessage base;
  uint64_t cursor_handle;
  Ham__Record *record;
  uint32_t flags;
};
#define HAM__CURSOR_OVERWRITE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_overwrite_request__descriptor) \
    , 0, NULL, 0 }


struct  _Ham__CursorOverwriteReply
{
  ProtobufCMessage base;
  int32_t status;
};
#define HAM__CURSOR_OVERWRITE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_overwrite_reply__descriptor) \
    , 0 }


struct  _Ham__CursorMoveRequest
{
  ProtobufCMessage base;
  uint64_t cursor_handle;
  Ham__Key *key;
  Ham__Record *record;
  uint32_t flags;
};
#define HAM__CURSOR_MOVE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_move_request__descriptor) \
    , 0, NULL, NULL, 0 }


struct  _Ham__CursorMoveReply
{
  ProtobufCMessage base;
  int32_t status;
  Ham__Key *key;
  Ham__Record *record;
};
#define HAM__CURSOR_MOVE_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__cursor_move_reply__descriptor) \
    , 0, NULL, NULL }


/* Ham__Wrapper methods */
void   ham__wrapper__init
                     (Ham__Wrapper         *message);
size_t ham__wrapper__get_packed_size
                     (const Ham__Wrapper   *message);
size_t ham__wrapper__pack
                     (const Ham__Wrapper   *message,
                      uint8_t             *out);
size_t ham__wrapper__pack_to_buffer
                     (const Ham__Wrapper   *message,
                      ProtobufCBuffer     *buffer);
Ham__Wrapper *
       ham__wrapper__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__wrapper__free_unpacked
                     (Ham__Wrapper *message,
                      ProtobufCAllocator *allocator);
/* Ham__ConnectRequest methods */
void   ham__connect_request__init
                     (Ham__ConnectRequest         *message);
size_t ham__connect_request__get_packed_size
                     (const Ham__ConnectRequest   *message);
size_t ham__connect_request__pack
                     (const Ham__ConnectRequest   *message,
                      uint8_t             *out);
size_t ham__connect_request__pack_to_buffer
                     (const Ham__ConnectRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__ConnectRequest *
       ham__connect_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__connect_request__free_unpacked
                     (Ham__ConnectRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__ConnectReply methods */
void   ham__connect_reply__init
                     (Ham__ConnectReply         *message);
size_t ham__connect_reply__get_packed_size
                     (const Ham__ConnectReply   *message);
size_t ham__connect_reply__pack
                     (const Ham__ConnectReply   *message,
                      uint8_t             *out);
size_t ham__connect_reply__pack_to_buffer
                     (const Ham__ConnectReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__ConnectReply *
       ham__connect_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__connect_reply__free_unpacked
                     (Ham__ConnectReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvGetParametersRequest methods */
void   ham__env_get_parameters_request__init
                     (Ham__EnvGetParametersRequest         *message);
size_t ham__env_get_parameters_request__get_packed_size
                     (const Ham__EnvGetParametersRequest   *message);
size_t ham__env_get_parameters_request__pack
                     (const Ham__EnvGetParametersRequest   *message,
                      uint8_t             *out);
size_t ham__env_get_parameters_request__pack_to_buffer
                     (const Ham__EnvGetParametersRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvGetParametersRequest *
       ham__env_get_parameters_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_get_parameters_request__free_unpacked
                     (Ham__EnvGetParametersRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvGetParametersReply methods */
void   ham__env_get_parameters_reply__init
                     (Ham__EnvGetParametersReply         *message);
size_t ham__env_get_parameters_reply__get_packed_size
                     (const Ham__EnvGetParametersReply   *message);
size_t ham__env_get_parameters_reply__pack
                     (const Ham__EnvGetParametersReply   *message,
                      uint8_t             *out);
size_t ham__env_get_parameters_reply__pack_to_buffer
                     (const Ham__EnvGetParametersReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvGetParametersReply *
       ham__env_get_parameters_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_get_parameters_reply__free_unpacked
                     (Ham__EnvGetParametersReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvGetDatabaseNamesRequest methods */
void   ham__env_get_database_names_request__init
                     (Ham__EnvGetDatabaseNamesRequest         *message);
size_t ham__env_get_database_names_request__get_packed_size
                     (const Ham__EnvGetDatabaseNamesRequest   *message);
size_t ham__env_get_database_names_request__pack
                     (const Ham__EnvGetDatabaseNamesRequest   *message,
                      uint8_t             *out);
size_t ham__env_get_database_names_request__pack_to_buffer
                     (const Ham__EnvGetDatabaseNamesRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvGetDatabaseNamesRequest *
       ham__env_get_database_names_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_get_database_names_request__free_unpacked
                     (Ham__EnvGetDatabaseNamesRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvGetDatabaseNamesReply methods */
void   ham__env_get_database_names_reply__init
                     (Ham__EnvGetDatabaseNamesReply         *message);
size_t ham__env_get_database_names_reply__get_packed_size
                     (const Ham__EnvGetDatabaseNamesReply   *message);
size_t ham__env_get_database_names_reply__pack
                     (const Ham__EnvGetDatabaseNamesReply   *message,
                      uint8_t             *out);
size_t ham__env_get_database_names_reply__pack_to_buffer
                     (const Ham__EnvGetDatabaseNamesReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvGetDatabaseNamesReply *
       ham__env_get_database_names_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_get_database_names_reply__free_unpacked
                     (Ham__EnvGetDatabaseNamesReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvRenameRequest methods */
void   ham__env_rename_request__init
                     (Ham__EnvRenameRequest         *message);
size_t ham__env_rename_request__get_packed_size
                     (const Ham__EnvRenameRequest   *message);
size_t ham__env_rename_request__pack
                     (const Ham__EnvRenameRequest   *message,
                      uint8_t             *out);
size_t ham__env_rename_request__pack_to_buffer
                     (const Ham__EnvRenameRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvRenameRequest *
       ham__env_rename_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_rename_request__free_unpacked
                     (Ham__EnvRenameRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvRenameReply methods */
void   ham__env_rename_reply__init
                     (Ham__EnvRenameReply         *message);
size_t ham__env_rename_reply__get_packed_size
                     (const Ham__EnvRenameReply   *message);
size_t ham__env_rename_reply__pack
                     (const Ham__EnvRenameReply   *message,
                      uint8_t             *out);
size_t ham__env_rename_reply__pack_to_buffer
                     (const Ham__EnvRenameReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvRenameReply *
       ham__env_rename_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_rename_reply__free_unpacked
                     (Ham__EnvRenameReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvFlushRequest methods */
void   ham__env_flush_request__init
                     (Ham__EnvFlushRequest         *message);
size_t ham__env_flush_request__get_packed_size
                     (const Ham__EnvFlushRequest   *message);
size_t ham__env_flush_request__pack
                     (const Ham__EnvFlushRequest   *message,
                      uint8_t             *out);
size_t ham__env_flush_request__pack_to_buffer
                     (const Ham__EnvFlushRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvFlushRequest *
       ham__env_flush_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_flush_request__free_unpacked
                     (Ham__EnvFlushRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvFlushReply methods */
void   ham__env_flush_reply__init
                     (Ham__EnvFlushReply         *message);
size_t ham__env_flush_reply__get_packed_size
                     (const Ham__EnvFlushReply   *message);
size_t ham__env_flush_reply__pack
                     (const Ham__EnvFlushReply   *message,
                      uint8_t             *out);
size_t ham__env_flush_reply__pack_to_buffer
                     (const Ham__EnvFlushReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvFlushReply *
       ham__env_flush_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_flush_reply__free_unpacked
                     (Ham__EnvFlushReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvCreateDbRequest methods */
void   ham__env_create_db_request__init
                     (Ham__EnvCreateDbRequest         *message);
size_t ham__env_create_db_request__get_packed_size
                     (const Ham__EnvCreateDbRequest   *message);
size_t ham__env_create_db_request__pack
                     (const Ham__EnvCreateDbRequest   *message,
                      uint8_t             *out);
size_t ham__env_create_db_request__pack_to_buffer
                     (const Ham__EnvCreateDbRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvCreateDbRequest *
       ham__env_create_db_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_create_db_request__free_unpacked
                     (Ham__EnvCreateDbRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvCreateDbReply methods */
void   ham__env_create_db_reply__init
                     (Ham__EnvCreateDbReply         *message);
size_t ham__env_create_db_reply__get_packed_size
                     (const Ham__EnvCreateDbReply   *message);
size_t ham__env_create_db_reply__pack
                     (const Ham__EnvCreateDbReply   *message,
                      uint8_t             *out);
size_t ham__env_create_db_reply__pack_to_buffer
                     (const Ham__EnvCreateDbReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvCreateDbReply *
       ham__env_create_db_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_create_db_reply__free_unpacked
                     (Ham__EnvCreateDbReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvOpenDbRequest methods */
void   ham__env_open_db_request__init
                     (Ham__EnvOpenDbRequest         *message);
size_t ham__env_open_db_request__get_packed_size
                     (const Ham__EnvOpenDbRequest   *message);
size_t ham__env_open_db_request__pack
                     (const Ham__EnvOpenDbRequest   *message,
                      uint8_t             *out);
size_t ham__env_open_db_request__pack_to_buffer
                     (const Ham__EnvOpenDbRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvOpenDbRequest *
       ham__env_open_db_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_open_db_request__free_unpacked
                     (Ham__EnvOpenDbRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvOpenDbReply methods */
void   ham__env_open_db_reply__init
                     (Ham__EnvOpenDbReply         *message);
size_t ham__env_open_db_reply__get_packed_size
                     (const Ham__EnvOpenDbReply   *message);
size_t ham__env_open_db_reply__pack
                     (const Ham__EnvOpenDbReply   *message,
                      uint8_t             *out);
size_t ham__env_open_db_reply__pack_to_buffer
                     (const Ham__EnvOpenDbReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvOpenDbReply *
       ham__env_open_db_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_open_db_reply__free_unpacked
                     (Ham__EnvOpenDbReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvEraseDbRequest methods */
void   ham__env_erase_db_request__init
                     (Ham__EnvEraseDbRequest         *message);
size_t ham__env_erase_db_request__get_packed_size
                     (const Ham__EnvEraseDbRequest   *message);
size_t ham__env_erase_db_request__pack
                     (const Ham__EnvEraseDbRequest   *message,
                      uint8_t             *out);
size_t ham__env_erase_db_request__pack_to_buffer
                     (const Ham__EnvEraseDbRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvEraseDbRequest *
       ham__env_erase_db_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_erase_db_request__free_unpacked
                     (Ham__EnvEraseDbRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__EnvEraseDbReply methods */
void   ham__env_erase_db_reply__init
                     (Ham__EnvEraseDbReply         *message);
size_t ham__env_erase_db_reply__get_packed_size
                     (const Ham__EnvEraseDbReply   *message);
size_t ham__env_erase_db_reply__pack
                     (const Ham__EnvEraseDbReply   *message,
                      uint8_t             *out);
size_t ham__env_erase_db_reply__pack_to_buffer
                     (const Ham__EnvEraseDbReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__EnvEraseDbReply *
       ham__env_erase_db_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__env_erase_db_reply__free_unpacked
                     (Ham__EnvEraseDbReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbCloseRequest methods */
void   ham__db_close_request__init
                     (Ham__DbCloseRequest         *message);
size_t ham__db_close_request__get_packed_size
                     (const Ham__DbCloseRequest   *message);
size_t ham__db_close_request__pack
                     (const Ham__DbCloseRequest   *message,
                      uint8_t             *out);
size_t ham__db_close_request__pack_to_buffer
                     (const Ham__DbCloseRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbCloseRequest *
       ham__db_close_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_close_request__free_unpacked
                     (Ham__DbCloseRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbCloseReply methods */
void   ham__db_close_reply__init
                     (Ham__DbCloseReply         *message);
size_t ham__db_close_reply__get_packed_size
                     (const Ham__DbCloseReply   *message);
size_t ham__db_close_reply__pack
                     (const Ham__DbCloseReply   *message,
                      uint8_t             *out);
size_t ham__db_close_reply__pack_to_buffer
                     (const Ham__DbCloseReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbCloseReply *
       ham__db_close_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_close_reply__free_unpacked
                     (Ham__DbCloseReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbGetParametersRequest methods */
void   ham__db_get_parameters_request__init
                     (Ham__DbGetParametersRequest         *message);
size_t ham__db_get_parameters_request__get_packed_size
                     (const Ham__DbGetParametersRequest   *message);
size_t ham__db_get_parameters_request__pack
                     (const Ham__DbGetParametersRequest   *message,
                      uint8_t             *out);
size_t ham__db_get_parameters_request__pack_to_buffer
                     (const Ham__DbGetParametersRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbGetParametersRequest *
       ham__db_get_parameters_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_get_parameters_request__free_unpacked
                     (Ham__DbGetParametersRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbGetParametersReply methods */
void   ham__db_get_parameters_reply__init
                     (Ham__DbGetParametersReply         *message);
size_t ham__db_get_parameters_reply__get_packed_size
                     (const Ham__DbGetParametersReply   *message);
size_t ham__db_get_parameters_reply__pack
                     (const Ham__DbGetParametersReply   *message,
                      uint8_t             *out);
size_t ham__db_get_parameters_reply__pack_to_buffer
                     (const Ham__DbGetParametersReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbGetParametersReply *
       ham__db_get_parameters_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_get_parameters_reply__free_unpacked
                     (Ham__DbGetParametersReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbFlushRequest methods */
void   ham__db_flush_request__init
                     (Ham__DbFlushRequest         *message);
size_t ham__db_flush_request__get_packed_size
                     (const Ham__DbFlushRequest   *message);
size_t ham__db_flush_request__pack
                     (const Ham__DbFlushRequest   *message,
                      uint8_t             *out);
size_t ham__db_flush_request__pack_to_buffer
                     (const Ham__DbFlushRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbFlushRequest *
       ham__db_flush_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_flush_request__free_unpacked
                     (Ham__DbFlushRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbFlushReply methods */
void   ham__db_flush_reply__init
                     (Ham__DbFlushReply         *message);
size_t ham__db_flush_reply__get_packed_size
                     (const Ham__DbFlushReply   *message);
size_t ham__db_flush_reply__pack
                     (const Ham__DbFlushReply   *message,
                      uint8_t             *out);
size_t ham__db_flush_reply__pack_to_buffer
                     (const Ham__DbFlushReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbFlushReply *
       ham__db_flush_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_flush_reply__free_unpacked
                     (Ham__DbFlushReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__TxnBeginRequest methods */
void   ham__txn_begin_request__init
                     (Ham__TxnBeginRequest         *message);
size_t ham__txn_begin_request__get_packed_size
                     (const Ham__TxnBeginRequest   *message);
size_t ham__txn_begin_request__pack
                     (const Ham__TxnBeginRequest   *message,
                      uint8_t             *out);
size_t ham__txn_begin_request__pack_to_buffer
                     (const Ham__TxnBeginRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__TxnBeginRequest *
       ham__txn_begin_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__txn_begin_request__free_unpacked
                     (Ham__TxnBeginRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__TxnBeginReply methods */
void   ham__txn_begin_reply__init
                     (Ham__TxnBeginReply         *message);
size_t ham__txn_begin_reply__get_packed_size
                     (const Ham__TxnBeginReply   *message);
size_t ham__txn_begin_reply__pack
                     (const Ham__TxnBeginReply   *message,
                      uint8_t             *out);
size_t ham__txn_begin_reply__pack_to_buffer
                     (const Ham__TxnBeginReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__TxnBeginReply *
       ham__txn_begin_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__txn_begin_reply__free_unpacked
                     (Ham__TxnBeginReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__TxnCommitRequest methods */
void   ham__txn_commit_request__init
                     (Ham__TxnCommitRequest         *message);
size_t ham__txn_commit_request__get_packed_size
                     (const Ham__TxnCommitRequest   *message);
size_t ham__txn_commit_request__pack
                     (const Ham__TxnCommitRequest   *message,
                      uint8_t             *out);
size_t ham__txn_commit_request__pack_to_buffer
                     (const Ham__TxnCommitRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__TxnCommitRequest *
       ham__txn_commit_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__txn_commit_request__free_unpacked
                     (Ham__TxnCommitRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__TxnCommitReply methods */
void   ham__txn_commit_reply__init
                     (Ham__TxnCommitReply         *message);
size_t ham__txn_commit_reply__get_packed_size
                     (const Ham__TxnCommitReply   *message);
size_t ham__txn_commit_reply__pack
                     (const Ham__TxnCommitReply   *message,
                      uint8_t             *out);
size_t ham__txn_commit_reply__pack_to_buffer
                     (const Ham__TxnCommitReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__TxnCommitReply *
       ham__txn_commit_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__txn_commit_reply__free_unpacked
                     (Ham__TxnCommitReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__TxnAbortRequest methods */
void   ham__txn_abort_request__init
                     (Ham__TxnAbortRequest         *message);
size_t ham__txn_abort_request__get_packed_size
                     (const Ham__TxnAbortRequest   *message);
size_t ham__txn_abort_request__pack
                     (const Ham__TxnAbortRequest   *message,
                      uint8_t             *out);
size_t ham__txn_abort_request__pack_to_buffer
                     (const Ham__TxnAbortRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__TxnAbortRequest *
       ham__txn_abort_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__txn_abort_request__free_unpacked
                     (Ham__TxnAbortRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__TxnAbortReply methods */
void   ham__txn_abort_reply__init
                     (Ham__TxnAbortReply         *message);
size_t ham__txn_abort_reply__get_packed_size
                     (const Ham__TxnAbortReply   *message);
size_t ham__txn_abort_reply__pack
                     (const Ham__TxnAbortReply   *message,
                      uint8_t             *out);
size_t ham__txn_abort_reply__pack_to_buffer
                     (const Ham__TxnAbortReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__TxnAbortReply *
       ham__txn_abort_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__txn_abort_reply__free_unpacked
                     (Ham__TxnAbortReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbCheckIntegrityRequest methods */
void   ham__db_check_integrity_request__init
                     (Ham__DbCheckIntegrityRequest         *message);
size_t ham__db_check_integrity_request__get_packed_size
                     (const Ham__DbCheckIntegrityRequest   *message);
size_t ham__db_check_integrity_request__pack
                     (const Ham__DbCheckIntegrityRequest   *message,
                      uint8_t             *out);
size_t ham__db_check_integrity_request__pack_to_buffer
                     (const Ham__DbCheckIntegrityRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbCheckIntegrityRequest *
       ham__db_check_integrity_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_check_integrity_request__free_unpacked
                     (Ham__DbCheckIntegrityRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbCheckIntegrityReply methods */
void   ham__db_check_integrity_reply__init
                     (Ham__DbCheckIntegrityReply         *message);
size_t ham__db_check_integrity_reply__get_packed_size
                     (const Ham__DbCheckIntegrityReply   *message);
size_t ham__db_check_integrity_reply__pack
                     (const Ham__DbCheckIntegrityReply   *message,
                      uint8_t             *out);
size_t ham__db_check_integrity_reply__pack_to_buffer
                     (const Ham__DbCheckIntegrityReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbCheckIntegrityReply *
       ham__db_check_integrity_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_check_integrity_reply__free_unpacked
                     (Ham__DbCheckIntegrityReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbGetKeyCountRequest methods */
void   ham__db_get_key_count_request__init
                     (Ham__DbGetKeyCountRequest         *message);
size_t ham__db_get_key_count_request__get_packed_size
                     (const Ham__DbGetKeyCountRequest   *message);
size_t ham__db_get_key_count_request__pack
                     (const Ham__DbGetKeyCountRequest   *message,
                      uint8_t             *out);
size_t ham__db_get_key_count_request__pack_to_buffer
                     (const Ham__DbGetKeyCountRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbGetKeyCountRequest *
       ham__db_get_key_count_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_get_key_count_request__free_unpacked
                     (Ham__DbGetKeyCountRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbGetKeyCountReply methods */
void   ham__db_get_key_count_reply__init
                     (Ham__DbGetKeyCountReply         *message);
size_t ham__db_get_key_count_reply__get_packed_size
                     (const Ham__DbGetKeyCountReply   *message);
size_t ham__db_get_key_count_reply__pack
                     (const Ham__DbGetKeyCountReply   *message,
                      uint8_t             *out);
size_t ham__db_get_key_count_reply__pack_to_buffer
                     (const Ham__DbGetKeyCountReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbGetKeyCountReply *
       ham__db_get_key_count_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_get_key_count_reply__free_unpacked
                     (Ham__DbGetKeyCountReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__Key methods */
void   ham__key__init
                     (Ham__Key         *message);
size_t ham__key__get_packed_size
                     (const Ham__Key   *message);
size_t ham__key__pack
                     (const Ham__Key   *message,
                      uint8_t             *out);
size_t ham__key__pack_to_buffer
                     (const Ham__Key   *message,
                      ProtobufCBuffer     *buffer);
Ham__Key *
       ham__key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__key__free_unpacked
                     (Ham__Key *message,
                      ProtobufCAllocator *allocator);
/* Ham__Record methods */
void   ham__record__init
                     (Ham__Record         *message);
size_t ham__record__get_packed_size
                     (const Ham__Record   *message);
size_t ham__record__pack
                     (const Ham__Record   *message,
                      uint8_t             *out);
size_t ham__record__pack_to_buffer
                     (const Ham__Record   *message,
                      ProtobufCBuffer     *buffer);
Ham__Record *
       ham__record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__record__free_unpacked
                     (Ham__Record *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbInsertRequest methods */
void   ham__db_insert_request__init
                     (Ham__DbInsertRequest         *message);
size_t ham__db_insert_request__get_packed_size
                     (const Ham__DbInsertRequest   *message);
size_t ham__db_insert_request__pack
                     (const Ham__DbInsertRequest   *message,
                      uint8_t             *out);
size_t ham__db_insert_request__pack_to_buffer
                     (const Ham__DbInsertRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbInsertRequest *
       ham__db_insert_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_insert_request__free_unpacked
                     (Ham__DbInsertRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbInsertReply methods */
void   ham__db_insert_reply__init
                     (Ham__DbInsertReply         *message);
size_t ham__db_insert_reply__get_packed_size
                     (const Ham__DbInsertReply   *message);
size_t ham__db_insert_reply__pack
                     (const Ham__DbInsertReply   *message,
                      uint8_t             *out);
size_t ham__db_insert_reply__pack_to_buffer
                     (const Ham__DbInsertReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbInsertReply *
       ham__db_insert_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_insert_reply__free_unpacked
                     (Ham__DbInsertReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbEraseRequest methods */
void   ham__db_erase_request__init
                     (Ham__DbEraseRequest         *message);
size_t ham__db_erase_request__get_packed_size
                     (const Ham__DbEraseRequest   *message);
size_t ham__db_erase_request__pack
                     (const Ham__DbEraseRequest   *message,
                      uint8_t             *out);
size_t ham__db_erase_request__pack_to_buffer
                     (const Ham__DbEraseRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbEraseRequest *
       ham__db_erase_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_erase_request__free_unpacked
                     (Ham__DbEraseRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbEraseReply methods */
void   ham__db_erase_reply__init
                     (Ham__DbEraseReply         *message);
size_t ham__db_erase_reply__get_packed_size
                     (const Ham__DbEraseReply   *message);
size_t ham__db_erase_reply__pack
                     (const Ham__DbEraseReply   *message,
                      uint8_t             *out);
size_t ham__db_erase_reply__pack_to_buffer
                     (const Ham__DbEraseReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbEraseReply *
       ham__db_erase_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_erase_reply__free_unpacked
                     (Ham__DbEraseReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbFindRequest methods */
void   ham__db_find_request__init
                     (Ham__DbFindRequest         *message);
size_t ham__db_find_request__get_packed_size
                     (const Ham__DbFindRequest   *message);
size_t ham__db_find_request__pack
                     (const Ham__DbFindRequest   *message,
                      uint8_t             *out);
size_t ham__db_find_request__pack_to_buffer
                     (const Ham__DbFindRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbFindRequest *
       ham__db_find_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_find_request__free_unpacked
                     (Ham__DbFindRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__DbFindReply methods */
void   ham__db_find_reply__init
                     (Ham__DbFindReply         *message);
size_t ham__db_find_reply__get_packed_size
                     (const Ham__DbFindReply   *message);
size_t ham__db_find_reply__pack
                     (const Ham__DbFindReply   *message,
                      uint8_t             *out);
size_t ham__db_find_reply__pack_to_buffer
                     (const Ham__DbFindReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__DbFindReply *
       ham__db_find_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__db_find_reply__free_unpacked
                     (Ham__DbFindReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorCreateRequest methods */
void   ham__cursor_create_request__init
                     (Ham__CursorCreateRequest         *message);
size_t ham__cursor_create_request__get_packed_size
                     (const Ham__CursorCreateRequest   *message);
size_t ham__cursor_create_request__pack
                     (const Ham__CursorCreateRequest   *message,
                      uint8_t             *out);
size_t ham__cursor_create_request__pack_to_buffer
                     (const Ham__CursorCreateRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorCreateRequest *
       ham__cursor_create_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_create_request__free_unpacked
                     (Ham__CursorCreateRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorCreateReply methods */
void   ham__cursor_create_reply__init
                     (Ham__CursorCreateReply         *message);
size_t ham__cursor_create_reply__get_packed_size
                     (const Ham__CursorCreateReply   *message);
size_t ham__cursor_create_reply__pack
                     (const Ham__CursorCreateReply   *message,
                      uint8_t             *out);
size_t ham__cursor_create_reply__pack_to_buffer
                     (const Ham__CursorCreateReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorCreateReply *
       ham__cursor_create_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_create_reply__free_unpacked
                     (Ham__CursorCreateReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorCloneRequest methods */
void   ham__cursor_clone_request__init
                     (Ham__CursorCloneRequest         *message);
size_t ham__cursor_clone_request__get_packed_size
                     (const Ham__CursorCloneRequest   *message);
size_t ham__cursor_clone_request__pack
                     (const Ham__CursorCloneRequest   *message,
                      uint8_t             *out);
size_t ham__cursor_clone_request__pack_to_buffer
                     (const Ham__CursorCloneRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorCloneRequest *
       ham__cursor_clone_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_clone_request__free_unpacked
                     (Ham__CursorCloneRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorCloneReply methods */
void   ham__cursor_clone_reply__init
                     (Ham__CursorCloneReply         *message);
size_t ham__cursor_clone_reply__get_packed_size
                     (const Ham__CursorCloneReply   *message);
size_t ham__cursor_clone_reply__pack
                     (const Ham__CursorCloneReply   *message,
                      uint8_t             *out);
size_t ham__cursor_clone_reply__pack_to_buffer
                     (const Ham__CursorCloneReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorCloneReply *
       ham__cursor_clone_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_clone_reply__free_unpacked
                     (Ham__CursorCloneReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorCloseRequest methods */
void   ham__cursor_close_request__init
                     (Ham__CursorCloseRequest         *message);
size_t ham__cursor_close_request__get_packed_size
                     (const Ham__CursorCloseRequest   *message);
size_t ham__cursor_close_request__pack
                     (const Ham__CursorCloseRequest   *message,
                      uint8_t             *out);
size_t ham__cursor_close_request__pack_to_buffer
                     (const Ham__CursorCloseRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorCloseRequest *
       ham__cursor_close_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_close_request__free_unpacked
                     (Ham__CursorCloseRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorCloseReply methods */
void   ham__cursor_close_reply__init
                     (Ham__CursorCloseReply         *message);
size_t ham__cursor_close_reply__get_packed_size
                     (const Ham__CursorCloseReply   *message);
size_t ham__cursor_close_reply__pack
                     (const Ham__CursorCloseReply   *message,
                      uint8_t             *out);
size_t ham__cursor_close_reply__pack_to_buffer
                     (const Ham__CursorCloseReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorCloseReply *
       ham__cursor_close_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_close_reply__free_unpacked
                     (Ham__CursorCloseReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorInsertRequest methods */
void   ham__cursor_insert_request__init
                     (Ham__CursorInsertRequest         *message);
size_t ham__cursor_insert_request__get_packed_size
                     (const Ham__CursorInsertRequest   *message);
size_t ham__cursor_insert_request__pack
                     (const Ham__CursorInsertRequest   *message,
                      uint8_t             *out);
size_t ham__cursor_insert_request__pack_to_buffer
                     (const Ham__CursorInsertRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorInsertRequest *
       ham__cursor_insert_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_insert_request__free_unpacked
                     (Ham__CursorInsertRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorInsertReply methods */
void   ham__cursor_insert_reply__init
                     (Ham__CursorInsertReply         *message);
size_t ham__cursor_insert_reply__get_packed_size
                     (const Ham__CursorInsertReply   *message);
size_t ham__cursor_insert_reply__pack
                     (const Ham__CursorInsertReply   *message,
                      uint8_t             *out);
size_t ham__cursor_insert_reply__pack_to_buffer
                     (const Ham__CursorInsertReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorInsertReply *
       ham__cursor_insert_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_insert_reply__free_unpacked
                     (Ham__CursorInsertReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorEraseRequest methods */
void   ham__cursor_erase_request__init
                     (Ham__CursorEraseRequest         *message);
size_t ham__cursor_erase_request__get_packed_size
                     (const Ham__CursorEraseRequest   *message);
size_t ham__cursor_erase_request__pack
                     (const Ham__CursorEraseRequest   *message,
                      uint8_t             *out);
size_t ham__cursor_erase_request__pack_to_buffer
                     (const Ham__CursorEraseRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorEraseRequest *
       ham__cursor_erase_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_erase_request__free_unpacked
                     (Ham__CursorEraseRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorEraseReply methods */
void   ham__cursor_erase_reply__init
                     (Ham__CursorEraseReply         *message);
size_t ham__cursor_erase_reply__get_packed_size
                     (const Ham__CursorEraseReply   *message);
size_t ham__cursor_erase_reply__pack
                     (const Ham__CursorEraseReply   *message,
                      uint8_t             *out);
size_t ham__cursor_erase_reply__pack_to_buffer
                     (const Ham__CursorEraseReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorEraseReply *
       ham__cursor_erase_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_erase_reply__free_unpacked
                     (Ham__CursorEraseReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorFindRequest methods */
void   ham__cursor_find_request__init
                     (Ham__CursorFindRequest         *message);
size_t ham__cursor_find_request__get_packed_size
                     (const Ham__CursorFindRequest   *message);
size_t ham__cursor_find_request__pack
                     (const Ham__CursorFindRequest   *message,
                      uint8_t             *out);
size_t ham__cursor_find_request__pack_to_buffer
                     (const Ham__CursorFindRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorFindRequest *
       ham__cursor_find_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_find_request__free_unpacked
                     (Ham__CursorFindRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorFindReply methods */
void   ham__cursor_find_reply__init
                     (Ham__CursorFindReply         *message);
size_t ham__cursor_find_reply__get_packed_size
                     (const Ham__CursorFindReply   *message);
size_t ham__cursor_find_reply__pack
                     (const Ham__CursorFindReply   *message,
                      uint8_t             *out);
size_t ham__cursor_find_reply__pack_to_buffer
                     (const Ham__CursorFindReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorFindReply *
       ham__cursor_find_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_find_reply__free_unpacked
                     (Ham__CursorFindReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorGetDuplicateCountRequest methods */
void   ham__cursor_get_duplicate_count_request__init
                     (Ham__CursorGetDuplicateCountRequest         *message);
size_t ham__cursor_get_duplicate_count_request__get_packed_size
                     (const Ham__CursorGetDuplicateCountRequest   *message);
size_t ham__cursor_get_duplicate_count_request__pack
                     (const Ham__CursorGetDuplicateCountRequest   *message,
                      uint8_t             *out);
size_t ham__cursor_get_duplicate_count_request__pack_to_buffer
                     (const Ham__CursorGetDuplicateCountRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorGetDuplicateCountRequest *
       ham__cursor_get_duplicate_count_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_get_duplicate_count_request__free_unpacked
                     (Ham__CursorGetDuplicateCountRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorGetDuplicateCountReply methods */
void   ham__cursor_get_duplicate_count_reply__init
                     (Ham__CursorGetDuplicateCountReply         *message);
size_t ham__cursor_get_duplicate_count_reply__get_packed_size
                     (const Ham__CursorGetDuplicateCountReply   *message);
size_t ham__cursor_get_duplicate_count_reply__pack
                     (const Ham__CursorGetDuplicateCountReply   *message,
                      uint8_t             *out);
size_t ham__cursor_get_duplicate_count_reply__pack_to_buffer
                     (const Ham__CursorGetDuplicateCountReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorGetDuplicateCountReply *
       ham__cursor_get_duplicate_count_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_get_duplicate_count_reply__free_unpacked
                     (Ham__CursorGetDuplicateCountReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorOverwriteRequest methods */
void   ham__cursor_overwrite_request__init
                     (Ham__CursorOverwriteRequest         *message);
size_t ham__cursor_overwrite_request__get_packed_size
                     (const Ham__CursorOverwriteRequest   *message);
size_t ham__cursor_overwrite_request__pack
                     (const Ham__CursorOverwriteRequest   *message,
                      uint8_t             *out);
size_t ham__cursor_overwrite_request__pack_to_buffer
                     (const Ham__CursorOverwriteRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorOverwriteRequest *
       ham__cursor_overwrite_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_overwrite_request__free_unpacked
                     (Ham__CursorOverwriteRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorOverwriteReply methods */
void   ham__cursor_overwrite_reply__init
                     (Ham__CursorOverwriteReply         *message);
size_t ham__cursor_overwrite_reply__get_packed_size
                     (const Ham__CursorOverwriteReply   *message);
size_t ham__cursor_overwrite_reply__pack
                     (const Ham__CursorOverwriteReply   *message,
                      uint8_t             *out);
size_t ham__cursor_overwrite_reply__pack_to_buffer
                     (const Ham__CursorOverwriteReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorOverwriteReply *
       ham__cursor_overwrite_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_overwrite_reply__free_unpacked
                     (Ham__CursorOverwriteReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorMoveRequest methods */
void   ham__cursor_move_request__init
                     (Ham__CursorMoveRequest         *message);
size_t ham__cursor_move_request__get_packed_size
                     (const Ham__CursorMoveRequest   *message);
size_t ham__cursor_move_request__pack
                     (const Ham__CursorMoveRequest   *message,
                      uint8_t             *out);
size_t ham__cursor_move_request__pack_to_buffer
                     (const Ham__CursorMoveRequest   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorMoveRequest *
       ham__cursor_move_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_move_request__free_unpacked
                     (Ham__CursorMoveRequest *message,
                      ProtobufCAllocator *allocator);
/* Ham__CursorMoveReply methods */
void   ham__cursor_move_reply__init
                     (Ham__CursorMoveReply         *message);
size_t ham__cursor_move_reply__get_packed_size
                     (const Ham__CursorMoveReply   *message);
size_t ham__cursor_move_reply__pack
                     (const Ham__CursorMoveReply   *message,
                      uint8_t             *out);
size_t ham__cursor_move_reply__pack_to_buffer
                     (const Ham__CursorMoveReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__CursorMoveReply *
       ham__cursor_move_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__cursor_move_reply__free_unpacked
                     (Ham__CursorMoveReply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ham__Wrapper_Closure)
                 (const Ham__Wrapper *message,
                  void *closure_data);
typedef void (*Ham__ConnectRequest_Closure)
                 (const Ham__ConnectRequest *message,
                  void *closure_data);
typedef void (*Ham__ConnectReply_Closure)
                 (const Ham__ConnectReply *message,
                  void *closure_data);
typedef void (*Ham__EnvGetParametersRequest_Closure)
                 (const Ham__EnvGetParametersRequest *message,
                  void *closure_data);
typedef void (*Ham__EnvGetParametersReply_Closure)
                 (const Ham__EnvGetParametersReply *message,
                  void *closure_data);
typedef void (*Ham__EnvGetDatabaseNamesRequest_Closure)
                 (const Ham__EnvGetDatabaseNamesRequest *message,
                  void *closure_data);
typedef void (*Ham__EnvGetDatabaseNamesReply_Closure)
                 (const Ham__EnvGetDatabaseNamesReply *message,
                  void *closure_data);
typedef void (*Ham__EnvRenameRequest_Closure)
                 (const Ham__EnvRenameRequest *message,
                  void *closure_data);
typedef void (*Ham__EnvRenameReply_Closure)
                 (const Ham__EnvRenameReply *message,
                  void *closure_data);
typedef void (*Ham__EnvFlushRequest_Closure)
                 (const Ham__EnvFlushRequest *message,
                  void *closure_data);
typedef void (*Ham__EnvFlushReply_Closure)
                 (const Ham__EnvFlushReply *message,
                  void *closure_data);
typedef void (*Ham__EnvCreateDbRequest_Closure)
                 (const Ham__EnvCreateDbRequest *message,
                  void *closure_data);
typedef void (*Ham__EnvCreateDbReply_Closure)
                 (const Ham__EnvCreateDbReply *message,
                  void *closure_data);
typedef void (*Ham__EnvOpenDbRequest_Closure)
                 (const Ham__EnvOpenDbRequest *message,
                  void *closure_data);
typedef void (*Ham__EnvOpenDbReply_Closure)
                 (const Ham__EnvOpenDbReply *message,
                  void *closure_data);
typedef void (*Ham__EnvEraseDbRequest_Closure)
                 (const Ham__EnvEraseDbRequest *message,
                  void *closure_data);
typedef void (*Ham__EnvEraseDbReply_Closure)
                 (const Ham__EnvEraseDbReply *message,
                  void *closure_data);
typedef void (*Ham__DbCloseRequest_Closure)
                 (const Ham__DbCloseRequest *message,
                  void *closure_data);
typedef void (*Ham__DbCloseReply_Closure)
                 (const Ham__DbCloseReply *message,
                  void *closure_data);
typedef void (*Ham__DbGetParametersRequest_Closure)
                 (const Ham__DbGetParametersRequest *message,
                  void *closure_data);
typedef void (*Ham__DbGetParametersReply_Closure)
                 (const Ham__DbGetParametersReply *message,
                  void *closure_data);
typedef void (*Ham__DbFlushRequest_Closure)
                 (const Ham__DbFlushRequest *message,
                  void *closure_data);
typedef void (*Ham__DbFlushReply_Closure)
                 (const Ham__DbFlushReply *message,
                  void *closure_data);
typedef void (*Ham__TxnBeginRequest_Closure)
                 (const Ham__TxnBeginRequest *message,
                  void *closure_data);
typedef void (*Ham__TxnBeginReply_Closure)
                 (const Ham__TxnBeginReply *message,
                  void *closure_data);
typedef void (*Ham__TxnCommitRequest_Closure)
                 (const Ham__TxnCommitRequest *message,
                  void *closure_data);
typedef void (*Ham__TxnCommitReply_Closure)
                 (const Ham__TxnCommitReply *message,
                  void *closure_data);
typedef void (*Ham__TxnAbortRequest_Closure)
                 (const Ham__TxnAbortRequest *message,
                  void *closure_data);
typedef void (*Ham__TxnAbortReply_Closure)
                 (const Ham__TxnAbortReply *message,
                  void *closure_data);
typedef void (*Ham__DbCheckIntegrityRequest_Closure)
                 (const Ham__DbCheckIntegrityRequest *message,
                  void *closure_data);
typedef void (*Ham__DbCheckIntegrityReply_Closure)
                 (const Ham__DbCheckIntegrityReply *message,
                  void *closure_data);
typedef void (*Ham__DbGetKeyCountRequest_Closure)
                 (const Ham__DbGetKeyCountRequest *message,
                  void *closure_data);
typedef void (*Ham__DbGetKeyCountReply_Closure)
                 (const Ham__DbGetKeyCountReply *message,
                  void *closure_data);
typedef void (*Ham__Key_Closure)
                 (const Ham__Key *message,
                  void *closure_data);
typedef void (*Ham__Record_Closure)
                 (const Ham__Record *message,
                  void *closure_data);
typedef void (*Ham__DbInsertRequest_Closure)
                 (const Ham__DbInsertRequest *message,
                  void *closure_data);
typedef void (*Ham__DbInsertReply_Closure)
                 (const Ham__DbInsertReply *message,
                  void *closure_data);
typedef void (*Ham__DbEraseRequest_Closure)
                 (const Ham__DbEraseRequest *message,
                  void *closure_data);
typedef void (*Ham__DbEraseReply_Closure)
                 (const Ham__DbEraseReply *message,
                  void *closure_data);
typedef void (*Ham__DbFindRequest_Closure)
                 (const Ham__DbFindRequest *message,
                  void *closure_data);
typedef void (*Ham__DbFindReply_Closure)
                 (const Ham__DbFindReply *message,
                  void *closure_data);
typedef void (*Ham__CursorCreateRequest_Closure)
                 (const Ham__CursorCreateRequest *message,
                  void *closure_data);
typedef void (*Ham__CursorCreateReply_Closure)
                 (const Ham__CursorCreateReply *message,
                  void *closure_data);
typedef void (*Ham__CursorCloneRequest_Closure)
                 (const Ham__CursorCloneRequest *message,
                  void *closure_data);
typedef void (*Ham__CursorCloneReply_Closure)
                 (const Ham__CursorCloneReply *message,
                  void *closure_data);
typedef void (*Ham__CursorCloseRequest_Closure)
                 (const Ham__CursorCloseRequest *message,
                  void *closure_data);
typedef void (*Ham__CursorCloseReply_Closure)
                 (const Ham__CursorCloseReply *message,
                  void *closure_data);
typedef void (*Ham__CursorInsertRequest_Closure)
                 (const Ham__CursorInsertRequest *message,
                  void *closure_data);
typedef void (*Ham__CursorInsertReply_Closure)
                 (const Ham__CursorInsertReply *message,
                  void *closure_data);
typedef void (*Ham__CursorEraseRequest_Closure)
                 (const Ham__CursorEraseRequest *message,
                  void *closure_data);
typedef void (*Ham__CursorEraseReply_Closure)
                 (const Ham__CursorEraseReply *message,
                  void *closure_data);
typedef void (*Ham__CursorFindRequest_Closure)
                 (const Ham__CursorFindRequest *message,
                  void *closure_data);
typedef void (*Ham__CursorFindReply_Closure)
                 (const Ham__CursorFindReply *message,
                  void *closure_data);
typedef void (*Ham__CursorGetDuplicateCountRequest_Closure)
                 (const Ham__CursorGetDuplicateCountRequest *message,
                  void *closure_data);
typedef void (*Ham__CursorGetDuplicateCountReply_Closure)
                 (const Ham__CursorGetDuplicateCountReply *message,
                  void *closure_data);
typedef void (*Ham__CursorOverwriteRequest_Closure)
                 (const Ham__CursorOverwriteRequest *message,
                  void *closure_data);
typedef void (*Ham__CursorOverwriteReply_Closure)
                 (const Ham__CursorOverwriteReply *message,
                  void *closure_data);
typedef void (*Ham__CursorMoveRequest_Closure)
                 (const Ham__CursorMoveRequest *message,
                  void *closure_data);
typedef void (*Ham__CursorMoveReply_Closure)
                 (const Ham__CursorMoveReply *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ham__wrapper__descriptor;
extern const ProtobufCEnumDescriptor    ham__wrapper__type__descriptor;
extern const ProtobufCMessageDescriptor ham__connect_request__descriptor;
extern const ProtobufCMessageDescriptor ham__connect_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__env_get_parameters_request__descriptor;
extern const ProtobufCMessageDescriptor ham__env_get_parameters_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__env_get_database_names_request__descriptor;
extern const ProtobufCMessageDescriptor ham__env_get_database_names_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__env_rename_request__descriptor;
extern const ProtobufCMessageDescriptor ham__env_rename_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__env_flush_request__descriptor;
extern const ProtobufCMessageDescriptor ham__env_flush_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__env_create_db_request__descriptor;
extern const ProtobufCMessageDescriptor ham__env_create_db_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__env_open_db_request__descriptor;
extern const ProtobufCMessageDescriptor ham__env_open_db_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__env_erase_db_request__descriptor;
extern const ProtobufCMessageDescriptor ham__env_erase_db_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__db_close_request__descriptor;
extern const ProtobufCMessageDescriptor ham__db_close_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__db_get_parameters_request__descriptor;
extern const ProtobufCMessageDescriptor ham__db_get_parameters_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__db_flush_request__descriptor;
extern const ProtobufCMessageDescriptor ham__db_flush_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__txn_begin_request__descriptor;
extern const ProtobufCMessageDescriptor ham__txn_begin_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__txn_commit_request__descriptor;
extern const ProtobufCMessageDescriptor ham__txn_commit_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__txn_abort_request__descriptor;
extern const ProtobufCMessageDescriptor ham__txn_abort_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__db_check_integrity_request__descriptor;
extern const ProtobufCMessageDescriptor ham__db_check_integrity_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__db_get_key_count_request__descriptor;
extern const ProtobufCMessageDescriptor ham__db_get_key_count_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__key__descriptor;
extern const ProtobufCMessageDescriptor ham__record__descriptor;
extern const ProtobufCMessageDescriptor ham__db_insert_request__descriptor;
extern const ProtobufCMessageDescriptor ham__db_insert_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__db_erase_request__descriptor;
extern const ProtobufCMessageDescriptor ham__db_erase_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__db_find_request__descriptor;
extern const ProtobufCMessageDescriptor ham__db_find_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_create_request__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_create_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_clone_request__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_clone_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_close_request__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_close_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_insert_request__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_insert_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_erase_request__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_erase_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_find_request__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_find_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_get_duplicate_count_request__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_get_duplicate_count_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_overwrite_request__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_overwrite_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_move_request__descriptor;
extern const ProtobufCMessageDescriptor ham__cursor_move_reply__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_messages_2eproto__INCLUDED */
