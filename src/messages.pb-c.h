/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_messages_2eproto__INCLUDED
#define PROTOBUF_C_messages_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Ham__Connect Ham__Connect;
typedef struct _Ham__ConnectReply Ham__ConnectReply;
typedef struct _Ham__Rename Ham__Rename;
typedef struct _Ham__RenameReply Ham__RenameReply;


/* --- enums --- */


/* --- messages --- */

struct  _Ham__Connect
{
  ProtobufCMessage base;
  int64_t id;
  char *path;
};
#define HAM__CONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__connect__descriptor) \
    , 0, NULL }


struct  _Ham__ConnectReply
{
  ProtobufCMessage base;
  int64_t id;
  int32_t status;
};
#define HAM__CONNECT_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__connect_reply__descriptor) \
    , 0, 0 }


struct  _Ham__Rename
{
  ProtobufCMessage base;
  int64_t id;
  int32_t oldname;
  int32_t newname;
  int32_t flags;
};
#define HAM__RENAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__rename__descriptor) \
    , 0, 0, 0, 0 }


struct  _Ham__RenameReply
{
  ProtobufCMessage base;
  int64_t id;
  int32_t status;
};
#define HAM__RENAME_REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ham__rename_reply__descriptor) \
    , 0, 0 }


/* Ham__Connect methods */
void   ham__connect__init
                     (Ham__Connect         *message);
size_t ham__connect__get_packed_size
                     (const Ham__Connect   *message);
size_t ham__connect__pack
                     (const Ham__Connect   *message,
                      uint8_t             *out);
size_t ham__connect__pack_to_buffer
                     (const Ham__Connect   *message,
                      ProtobufCBuffer     *buffer);
Ham__Connect *
       ham__connect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__connect__free_unpacked
                     (Ham__Connect *message,
                      ProtobufCAllocator *allocator);
/* Ham__ConnectReply methods */
void   ham__connect_reply__init
                     (Ham__ConnectReply         *message);
size_t ham__connect_reply__get_packed_size
                     (const Ham__ConnectReply   *message);
size_t ham__connect_reply__pack
                     (const Ham__ConnectReply   *message,
                      uint8_t             *out);
size_t ham__connect_reply__pack_to_buffer
                     (const Ham__ConnectReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__ConnectReply *
       ham__connect_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__connect_reply__free_unpacked
                     (Ham__ConnectReply *message,
                      ProtobufCAllocator *allocator);
/* Ham__Rename methods */
void   ham__rename__init
                     (Ham__Rename         *message);
size_t ham__rename__get_packed_size
                     (const Ham__Rename   *message);
size_t ham__rename__pack
                     (const Ham__Rename   *message,
                      uint8_t             *out);
size_t ham__rename__pack_to_buffer
                     (const Ham__Rename   *message,
                      ProtobufCBuffer     *buffer);
Ham__Rename *
       ham__rename__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__rename__free_unpacked
                     (Ham__Rename *message,
                      ProtobufCAllocator *allocator);
/* Ham__RenameReply methods */
void   ham__rename_reply__init
                     (Ham__RenameReply         *message);
size_t ham__rename_reply__get_packed_size
                     (const Ham__RenameReply   *message);
size_t ham__rename_reply__pack
                     (const Ham__RenameReply   *message,
                      uint8_t             *out);
size_t ham__rename_reply__pack_to_buffer
                     (const Ham__RenameReply   *message,
                      ProtobufCBuffer     *buffer);
Ham__RenameReply *
       ham__rename_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ham__rename_reply__free_unpacked
                     (Ham__RenameReply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ham__Connect_Closure)
                 (const Ham__Connect *message,
                  void *closure_data);
typedef void (*Ham__ConnectReply_Closure)
                 (const Ham__ConnectReply *message,
                  void *closure_data);
typedef void (*Ham__Rename_Closure)
                 (const Ham__Rename *message,
                  void *closure_data);
typedef void (*Ham__RenameReply_Closure)
                 (const Ham__RenameReply *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ham__connect__descriptor;
extern const ProtobufCMessageDescriptor ham__connect_reply__descriptor;
extern const ProtobufCMessageDescriptor ham__rename__descriptor;
extern const ProtobufCMessageDescriptor ham__rename_reply__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_messages_2eproto__INCLUDED */
